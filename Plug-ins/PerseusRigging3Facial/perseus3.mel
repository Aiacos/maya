//QuadrupedWalkCycle("name");
global proc wf.ResetAllQuadruped(string $name)
{
select -r ($name+"_anim_Set");
string $objList[]=`ls -sl`;
string $attrList[];
for ($obj in $objList)
{
    $attrList=`listAttr -k ($obj+"_PS")`;
    for($attr in $attrList)
    {
      $attrVal=`getAttr ($obj+"_PS."+$attr)`;
      if ( catch( `setAttr ($obj+"."+$attr) $attrVal` ) )   print "";      
    }
}
select -cl;
}

global proc QuadrupedWalkCycle(string $name)
{
string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $versionString;
$versionString=`about -v`;
if(int($versionString)<2019)
ImportAnimOptions; else ImportAnim;
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
autoKeyframe -state false;
cycleCheck -e off;
wf.ResetAllQuadruped($name);
$currentFrame=` currentTime -q `;
playbackOptions -minTime 0 -maxTime 30;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_body_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDisNew=`arclen $curveDis`; 
delete $curveDis;
$start =`xform -q -ws -piv ($name+"_body_anim")`;
$end =`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDisNew=`arclen $curveDis`; 
delete $curveDis;
string $basicFilter="*.atom";
string $fDialogLd=($asSelectorScriptLocation+"/cycle/QuadrupedWalk.atom");
$adress=($fDialogLd+"s");
$fileId=`fopen $adress "r"`;
string $nextLine = `fgetline $fileId`;
float $spineDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
float $legDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
string $oldName=evalEcho($nextLine);
string $ffff=";;targetTime=3;option=replace;match=string;;selected=selectedOnly;search="+$oldName+";replace="+$name+";prefix=;suffix=;mapFile=C:/Users/Mohammad/Documents/maya/projects/New Folder/data/;";
select -r ($name+"_anim_Set");
file -import -type "atomImport" -ra true  -options $ffff $fDialogLd;
select -cl;
float $scaleSpine=$spineDisNew/$spineDis;
float $scaleLeg=$legDisNew/$legDis;
float $scaleAll=($scaleSpine+$scaleLeg)/2;
selectKey -r -k ($name+"_l_foot_*_translate*") ($name+"_r_foot_*_translate*")  ($name+"_l_footB_*_translate*") ($name+"_r_footB_*_translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;
select -r ($name+"_anim_Set");
select -d ($name+"_l_foot_anim")  ($name+"_r_foot_anim")  ($name+"_l_footB_anim")  ($name+"_r_footB_anim")  ;
string $objects[]=`ls -sl`;
for ($obj in $objects)
{
    if (`objExists ($obj +"_translate*Cycle*")`)
    {
        selectKey -r -k ($obj+"_translate*Cycle*");
        scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;        
    }
}
selectKey -cl;
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;
}

global proc QuadrupedRunCycle(string $name)
{
string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $versionString;
$versionString=`about -v`;
if(int($versionString)<2019)
ImportAnimOptions; else ImportAnim;
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
autoKeyframe -state false;
wf.ResetAllQuadruped($name);
$currentFrame=` currentTime -q `;
playbackOptions -minTime 0 -maxTime 12;
cycleCheck -e off;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_body_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDisNew=`arclen $curveDis`; 
delete $curveDis;
$start =`xform -q -ws -piv ($name+"_body_anim")`;
$end =`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDisNew=`arclen $curveDis`; 
delete $curveDis;
string $basicFilter="*.atom";
string $fDialogLd=($asSelectorScriptLocation+"/cycle/QuadrupedRun.atom");
$adress=($fDialogLd+"s");
$fileId=`fopen $adress "r"`;
$nextLine = `fgetline $fileId`;
float $spineDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
float $legDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
string $oldName=evalEcho($nextLine);
string $ffff=";;targetTime=3;option=replace;match=string;;selected=selectedOnly;search="+$oldName+";replace="+$name+";prefix=;suffix=;mapFile=C:/Users/Mohammad/Documents/maya/projects/New Folder/data/;";
select -r ($name+"_anim_Set");
file -import -type "atomImport" -ra true  -options $ffff $fDialogLd;
select -cl;
float $scaleSpine=$spineDisNew/$spineDis;
float $scaleLeg=$legDisNew/$legDis;
float $scaleAll=($scaleSpine+$scaleLeg)/2;
selectKey -r -k ($name+"_l_foot_*_translate*") ($name+"_r_foot_*_translate*")  ($name+"_l_footB_*_translate*") ($name+"_r_footB_*_translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;
select -r ($name+"_anim_Set");
select -d ($name+"_l_foot_anim")  ($name+"_r_foot_anim")  ($name+"_l_footB_anim")  ($name+"_r_footB_anim")  ;
string $objects[]=`ls -sl`;
for ($obj in $objects)
{
    if (`objExists ($obj +"_translate*Cycle*")`)
    {
        selectKey -r -k ($obj+"_translate*Cycle*");
        scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;        
    }
}
selectKey -cl;
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;
}

//QuadrupedFootStep("name"); $name="name";
global proc QuadrupedWalkFootStepA(string $name)
{
cycleCheck -e off;
float $FootStepPercent = 1;
string $object[]=`ls -sl`;
if(size($object)==1)
    {
        cycleCheck -e off;
        currentTime    (`playbackOptions -q -minTime`);
        $object[0]=`rename $object[0] ($name+"_walkCurve")`;
        select -r ($name+"_all_anim");
        js_quickAddAttrGo "txBase tyBase tzBase rxBase ryBase rzBase";
        setAttr -keyable false -channelBox false ($name+"_all_anim.txBase") (`getAttr  ($name+"_all_anim.translateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tyBase") (`getAttr  ($name+"_all_anim.translateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tzBase") (`getAttr  ($name+"_all_anim.translateZ")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rxBase") (`getAttr  ($name+"_all_anim.rotateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.ryBase") (`getAttr  ($name+"_all_anim.rotateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rzBase") (`getAttr  ($name+"_all_anim.rotateZ")`);
        
        

        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add $object[0] ;
        select -add ($name+"_l_footB_anim") ;
        select -add ($name+"_r_footB_anim") ;       
        //select -add curve1 ;
        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $thirdFoot="";
        string $fourthFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        $obj_3_tfront=`getAttr ($object[4]+".translate"+$frontAxis)`;
        $obj_4_tfront=`getAttr ($object[5]+".translate"+$frontAxis)`;
        if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
        
        if ($obj_3_tfront<$obj_4_tfront)
        {
        $thirdFoot=$object[4];
        $fourthFoot=$object[5];
        } else
        {
        $thirdFoot=$object[5];
        $fourthFoot=$object[4];
        } print $firstFoot;print $thirdFoot;print $fourthFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*$FootStepPercent;
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=0;$i<7;$i++)
        $second_foot_keyframe[$i]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=0;$i<2;$i++)
        $first_foot_keyframe[$i]=$first_foot_keyframe_index[$i];    
                for($i=5;$i<11;$i++)
        $first_foot1_keyframe[($i-5)]=$first_foot_keyframe_index[$i];
        //print ($first_foot1_keyframe);print ($first_foot_keyframe_index);
        //select -cl  ;
        
                        string $third_foot_convert[];
        float $third_foot_keyframe[];
        float $third_foot_keyframe_index[];
        select -r $thirdFoot;
        float $third_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($third_foot_keyframe_base);$i++)
        $third_foot_convert[$i]=$third_foot_keyframe_base[$i];
        $third_foot_convert=`stringArrayRemoveDuplicates($third_foot_convert)`;
        for($i=0;$i<size($third_foot_convert);$i++)
        $third_foot_keyframe_index[$i]=$third_foot_convert[$i];
        for($i=4;$i<10;$i++)
        $third_foot_keyframe[($i-4)]= $third_foot_keyframe_index[$i];
        //$third_foot_keyframe=$third_foot_convert;
        //print ($third_foot_keyframe);
       // select -cl  ;
        

       
         string $fourth_foot_convert[];
        float $fourth_foot_keyframe[];
        float $fourth_foot_keyframe_index[];
        float $fourth_foot1_keyframe[];
        select -r $fourthFoot;
        float $fourth_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($fourth_foot_keyframe_base);$i++)
        $fourth_foot_convert[$i]=$fourth_foot_keyframe_base[$i];
        $fourth_foot_convert=`stringArrayRemoveDuplicates($fourth_foot_convert)`;
        for($i=0;$i<size($fourth_foot_convert);$i++)
        $fourth_foot_keyframe_index[$i]=$fourth_foot_convert[$i];
        print $fourth_foot_keyframe_index;
        for($i=0;$i<5;$i++)
        $fourth_foot_keyframe[$i]=$fourth_foot_keyframe_index[$i];
        print $fourth_foot_keyframe;
        for($i=8;$i<11;$i++)
        $fourth_foot1_keyframe[($i-8)]=$fourth_foot_keyframe_index[$i];
        //print ($fourth_foot1_keyframe);print ($fourth_foot1_keyframe);
        select -cl  ;
        
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        //channelBoxCommand -break;
        //CBdeleteConnection ($all_anim+".r"+$sideAxis);
        //setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($name+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

        group -em -n "step_locator_grp";
        $i=1;
        currentTime ($firstFrame+$loopFrame*($i-1));
        curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ;  
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////
        curve -n ("locator_secondB_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ;  
        //spaceLocator -n ("locator_secondB_"+$i)   ;
        setAttr ("locator_secondB_"+$i+".overrideEnabled") 1;
        setAttr ("locator_secondB_"+$i+".overrideColor") 14;
        $pConst=`parentConstraint  $fourthFoot ("locator_secondB_"+$i)`;
        delete $pConst;
        /////////
        currentTime ($firstFrame+$loopFrame*($i-1));
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ; 
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        /////////
        currentTime ($firstFrame+$loopFrame*($i-1)+$third_foot_keyframe_index[4]);
        curve -n ("locator_firstB_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ; 
       // spaceLocator -n ("locator_firstB_"+$i)   ;
        setAttr ("locator_firstB_"+$i+".overrideEnabled") 1;
        setAttr ("locator_firstB_"+$i+".overrideColor") 6;
        $pConst=`parentConstraint  $thirdFoot ("locator_firstB_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) ("locator_secondB_"+$i) ("locator_firstB_"+$i) step_locator_grp;
        
        for($i=2;$i<=($loopCount+1);$i++)
        {
        currentTime ($firstFrame+$loopFrame*($i-1));
        curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ;  
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////print $loopFrame;print $fourth_foot_keyframe_index[8];
        currentTime ($firstFrame+$loopFrame*($i-1)-($loopFrame-$fourth_foot_keyframe_index[8]));
        curve -n ("locator_secondB_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ;  
        //spaceLocator -n ("locator_secondB_"+$i)   ;
        setAttr ("locator_secondB_"+$i+".overrideEnabled") 1;
        setAttr ("locator_secondB_"+$i+".overrideColor") 14;
        $pConst=`parentConstraint  $fourthFoot ("locator_secondB_"+$i)`;
        delete $pConst;
        /////////
        currentTime ($firstFrame+$loopFrame*($i-1)-$first_foot_keyframe_index[5]);
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ; 
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        /////////
        currentTime ($firstFrame+$loopFrame*($i-1)+$third_foot_keyframe_index[4]);
        curve -n ("locator_firstB_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.08) ($footStep*0.08) ($footStep*0.08) ; 
        //spaceLocator -n ("locator_firstB_"+$i)   ;
        setAttr ("locator_firstB_"+$i+".overrideEnabled") 1;
        setAttr ("locator_firstB_"+$i+".overrideColor") 6;
        $pConst=`parentConstraint  $thirdFoot ("locator_firstB_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) ("locator_secondB_"+$i) ("locator_firstB_"+$i) step_locator_grp;
        }
                currentTime($firstFrame);
        delete ($name+"_walkPath");
        setAttr ($name+"_all_anim.translateX") (`getAttr  ($name+"_all_anim.txBase")`);
        setAttr ($name+"_all_anim.translateY") (`getAttr  ($name+"_all_anim.tyBase")`);
        setAttr ($name+"_all_anim.translateZ") (`getAttr  ($name+"_all_anim.tzBase")`);
        setAttr ($name+"_all_anim.rotateX") (`getAttr  ($name+"_all_anim.rxBase")`);
        setAttr ($name+"_all_anim.rotateY") (`getAttr  ($name+"_all_anim.ryBase")`);
        setAttr ($name+"_all_anim.rotateZ") (`getAttr  ($name+"_all_anim.rzBase")`);
        select -r $object[3] ;
    }
    cycleCheck -e on;
}// CreateFootStep  CreateFootStep  CreateFootStep
//QuadrupedFootStep2("name"); $name="name";



//QuadrupedWalkFootStep("name");
global proc QuadrupedWalkFootStepB(string $name)
{
    cycleCheck -e off;
if (`objExists locator_second_1`)
    {
       float $FootStepPercent = 1;
    currentTime    (`playbackOptions -q -minTime`);
        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add ($name+"_walkCurve") ;
        select -add ($name+"_l_footB_anim") ;
        select -add ($name+"_r_footB_anim") ;
        //select -add curve1 ;
        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $thirdFoot="";
        string $fourthFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        $obj_3_tfront=`getAttr ($object[4]+".translate"+$frontAxis)`;
        $obj_4_tfront=`getAttr ($object[5]+".translate"+$frontAxis)`;
      if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
        
        if ($obj_3_tfront<$obj_4_tfront)
        {
        $thirdFoot=$object[4];
        $fourthFoot=$object[5];
        } else
        {
        $thirdFoot=$object[5];
        $fourthFoot=$object[4];
        } print $firstFoot;print $thirdFoot;print $fourthFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*$FootStepPercent;
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=0;$i<7;$i++)
        $second_foot_keyframe[$i]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=0;$i<2;$i++)
        $first_foot_keyframe[$i]=$first_foot_keyframe_index[$i];    
                for($i=5;$i<11;$i++)
        $first_foot1_keyframe[($i-5)]=$first_foot_keyframe_index[$i];
        //print ($first_foot1_keyframe);print ($first_foot_keyframe_index);
        //select -cl  ;
        
                        string $third_foot_convert[];
        float $third_foot_keyframe[];
        float $third_foot_keyframe_index[];
        select -r $thirdFoot;
        float $third_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($third_foot_keyframe_base);$i++)
        $third_foot_convert[$i]=$third_foot_keyframe_base[$i];
        $third_foot_convert=`stringArrayRemoveDuplicates($third_foot_convert)`;
        for($i=0;$i<size($third_foot_convert);$i++)
        $third_foot_keyframe_index[$i]=$third_foot_convert[$i];
        for($i=4;$i<10;$i++)
        $third_foot_keyframe[($i-4)]= $third_foot_keyframe_index[$i];
        //$third_foot_keyframe=$third_foot_convert;
        //print ($third_foot_keyframe);
       // select -cl  ;
        

       
         string $fourth_foot_convert[];
        float $fourth_foot_keyframe[];
        float $fourth_foot_keyframe_index[];
        float $fourth_foot1_keyframe[];
        select -r $fourthFoot;
        float $fourth_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($fourth_foot_keyframe_base);$i++)
        $fourth_foot_convert[$i]=$fourth_foot_keyframe_base[$i];
        $fourth_foot_convert=`stringArrayRemoveDuplicates($fourth_foot_convert)`;
        for($i=0;$i<size($fourth_foot_convert);$i++)
        $fourth_foot_keyframe_index[$i]=$fourth_foot_convert[$i];
        print $fourth_foot_keyframe_index;
        for($i=0;$i<5;$i++)
        $fourth_foot_keyframe[$i]=$fourth_foot_keyframe_index[$i];
        print $fourth_foot_keyframe;
        for($i=8;$i<11;$i++)
        $fourth_foot1_keyframe[($i-8)]=$fourth_foot_keyframe_index[$i];
        //print ($fourth_foot1_keyframe);print ($fourth_foot1_keyframe);
        select -cl  ;
        
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        //channelBoxCommand -break;
        //CBdeleteConnection ($all_anim+".r"+$sideAxis);
        //setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($name+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

select -cl  ;
select -r $secondFoot ;
select -add $firstFoot ;
select -add $thirdFoot ;
select -add $fourthFoot ;
//select -add $all_anim;
animLayer  ($name+"_CycleOnPath");
setAttr ($name+"_CycleOnPath.rotationAccumulationMode") 0;
setAttr ($name+"_CycleOnPath.scaleAccumulationMode") 1;
animLayer -e -addSelectedObjects($name+"_CycleOnPath");
animLayerEditorOnSelect "BaseAnimation" 0;
animLayerEditorOnSelect ($name+"_WalkCycle") 0;
animLayerEditorOnSelect ($name+"_CycleOnPath") 1;
print $second_foot_keyframe[0];
print $fourth_foot_keyframe[0];
print $first_foot_keyframe[0];
print $third_foot_keyframe[0];

print $first_foot1_keyframe[0];
print $fourth_foot1_keyframe[0];
//channelBoxCommand -break;
//CBdeleteConnection ($all_anim+".r"+$sideAxis);
for($i=1;$i<=$loopCount;$i++)
{
    float $r_l_loc[] = `xform -q -ws -piv ("locator_second_"+$i)`;
    float $r_l_rotate_loc[] = `xform -q -ws -ro ("locator_second_"+$i)`;
    float $r_r_loc[] = `xform -q -ws -piv ("locator_first_"+$i)`;
    float $r_r_rotate_loc[] = `xform -q -ws -ro ("locator_first_"+$i)`;
///////////////
    float $r_l_locB[] = `xform -q -ws -piv ("locator_secondB_"+$i)`;
    float $r_l_rotate_locB[] = `xform -q -ws -ro ("locator_secondB_"+$i)`;
    float $r_r_locB[] = `xform -q -ws -piv ("locator_firstB_"+$i)`;
    float $r_r_rotate_locB[] = `xform -q -ws -ro ("locator_firstB_"+$i)`;
///////////////
    float $r_l_locB1[] = `xform -q -ws -piv ("locator_secondB_"+($i+1))`;
    float $r_l_rotate_locB1[] = `xform -q -ws -ro ("locator_secondB_"+($i+1))`;
    float $r_r_loc1[] = `xform -q -ws -piv ("locator_first_"+($i+1))`;
    float $r_r_rotate_loc1[] = `xform -q -ws -ro ("locator_first_"+($i+1))`;

    for($j=0;$j<size($second_foot_keyframe);$j++)
    {
        currentTime ($second_foot_keyframe[$j]+$loopFrame*($i-1));
        move -rpr $r_l_loc[0] $r_l_loc[1] $r_l_loc[2] $secondFoot;
        xform  -ws -ro ($r_l_rotate_loc[0]) ($r_l_rotate_loc[1]) ($r_l_rotate_loc[2]) $secondFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$secondFoot};            
    }
        for($j=0;$j<size($fourth_foot_keyframe);$j++)
    {
                currentTime ($fourth_foot_keyframe[$j]+$loopFrame*($i-1));
            move -rpr $r_l_locB[0] $r_l_locB[1] $r_l_locB[2] $fourthFoot;
        xform  -ws -ro ($r_l_rotate_locB[0]) ($r_l_rotate_locB[1]) ($r_l_rotate_locB[2]) $fourthFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$fourthFoot};              
    } 
    
        for($j=0;$j<size($first_foot_keyframe);$j++)
    {
        currentTime ($first_foot_keyframe[$j]+$loopFrame*($i-1));
        move -rpr $r_r_loc[0] $r_r_loc[1] $r_r_loc[2] $firstFoot;
        xform  -ws -ro ($r_r_rotate_loc[0]) ($r_r_rotate_loc[1]) ($r_r_rotate_loc[2]) $firstFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$firstFoot};  
    }
            for($j=0;$j<size($third_foot_keyframe);$j++)
    {
                currentTime ($third_foot_keyframe[$j]+$loopFrame*($i-1));
            move -rpr $r_r_locB[0] $r_r_locB[1] $r_r_locB[2] $thirdFoot;
        xform  -ws -ro ($r_r_rotate_locB[0]) ($r_r_rotate_locB[1]) ($r_r_rotate_locB[2]) $thirdFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$thirdFoot};    
    }
    ////////////////////////////////////////////
        for($j=0;$j<size($first_foot1_keyframe);$j++)
    {
        currentTime ($first_foot1_keyframe[$j]+$loopFrame*($i-1));
        move -rpr $r_r_loc1[0] $r_r_loc1[1] $r_r_loc1[2] $firstFoot;
        xform  -ws -ro ($r_r_rotate_loc1[0]) ($r_r_rotate_loc1[1]) ($r_r_rotate_loc1[2]) $firstFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$firstFoot};  
    } 
        for($j=0;$j<size($fourth_foot1_keyframe);$j++)
    {
                currentTime ($fourth_foot1_keyframe[$j]+$loopFrame*($i-1));
            move -rpr $r_l_locB1[0] $r_l_locB1[1] $r_l_locB1[2] $fourthFoot;
        xform  -ws -ro ($r_l_rotate_locB1[0]) ($r_l_rotate_locB1[1]) ($r_l_rotate_locB1[2]) $fourthFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$fourthFoot};              
    }
}


///////
currentTime($firstFrame);
//////////
string $secondFoot_attr[]=`listAttr -k $secondFoot`;
string $firstFoot_attr[]=`listAttr -k $secondFoot`;

string $secondFootB_attr[]=`listAttr -k $fourthFoot`;
string $firstFootB_attr[]=`listAttr -k $thirdFoot`;
select -cl  ;
select -cl  ;
select -r $secondFoot ;
selectKey -clear ;
/////////////
		for ($sel in $secondFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($secondFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2); 
		        //selectKey -add -k ($fourthFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);         
		        }
		        	else
		        if($sel=="tag")
		        {}else
		        {
        selectKey -add -k ($secondFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
       // selectKey -add -k ($fourthFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }

}
		        keyTangent -itt linear -ott linear; 



select -cl  ;
select -r $firstFoot ;
selectKey -clear ;
		for ($sel in $firstFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($firstFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);   
		        //selectKey -add -k ($thirdFoot +"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);      
		        }
		        else
		        if($sel=="tag")
		        {}else
		        {
        selectKey -add -k ($firstFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        //selectKey -add -k ($thirdFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }
    }
		        keyTangent -itt linear -ott linear; 
		        select -cl  ;
		        
/////////////
		for ($sel in $secondFootB_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        //selectKey -add -k ($secondFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2); 
		        selectKey -add -k ($fourthFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);         
		        }
		        	else
		        if($sel=="tag")
		        {}else
		        {
        //selectKey -add -k ($secondFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        selectKey -add -k ($fourthFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }

}
		        keyTangent -itt linear -ott linear; 



select -cl  ;
select -r $firstFoot ;
selectKey -clear ;
		for ($sel in $firstFootB_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        //selectKey -add -k ($firstFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);   
		        selectKey -add -k ($thirdFoot +"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);      
		        }
		        else
		        if($sel=="tag")
		        {}else
		        {
        //selectKey -add -k ($firstFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        selectKey -add -k ($thirdFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }
    }
		        keyTangent -itt linear -ott linear; 
		        select -cl  ;
		       
delete step_locator_grp;
currentTime($firstFrame);
    }
    }


//////////
///////////////
////////////////////
////////////////////////////


global proc mocapSkleton(string $name)
{
select -r ($name+"_torso_base_skin") ;
duplicate -rr -renameChildren;
searchReplaceNames "_parentConstraint2" "_mocapparentConstraint" "hierarchy";
if ( catch( `delete ($name+"*_mocapparentConstraint")`))   print "";
searchReplaceNames "_skin1" "_mocap" "hierarchy";
delete ($name+"*_hlper_mocap");

select -cl  ;
parent ($name+"_r_lowLeg_1_mocap")  ($name+"_r_upLeg_1_mocap") ;
delete ($name+"_r_upLeg_2_mocap") ;

parent ($name+"_r_foot_mocap")  ($name+"_r_lowLeg_1_mocap") ;
delete ($name+"_r_lowLeg_2_mocap") ;

select -cl  ;
parent ($name+"_l_lowLeg_1_mocap")  ($name+"_l_upLeg_1_mocap") ;
delete ($name+"_l_upLeg_2_mocap") ;

parent ($name+"_l_foot_mocap")  ($name+"_l_lowLeg_1_mocap") ;
delete ($name+"_l_lowLeg_2_mocap") ;


parent ($name+"_torso_end_mocap")  ($name+"_torso_2_mocap") ;
parent ($name+"_torso_2_mocap")  ($name+"_torso_base_mocap") ;
select -r ($name+"_torso_3_mocap") ;
select -tgl ($name+"_torso_1_mocap") ;
Delete;

parent ($name+"_r_lowArm_base_mocap")  ($name+"_r_upArm_base_mocap") ;
parent ($name+"_r_hand_base_mocap")  ($name+"_r_lowArm_base_mocap") ;
delete ($name+"_r_lowArm_2_mocap") ;
delete ($name+"_r_upArm_2_mocap");
select -r ($name+"_r_hand_base_mocap") ;
select -hi;
select -d  ($name+"_r_hand_base_mocap") ;
select -d  ($name+"_r_fing_middle_base_mocap");
doDelete;

parent ($name+"_l_lowArm_base_mocap")  ($name+"_l_upArm_base_mocap") ;
parent ($name+"_l_hand_base_mocap")  ($name+"_l_lowArm_base_mocap") ;
delete ($name+"_l_lowArm_2_mocap") ;
delete ($name+"_l_upArm_2_mocap");
select -r ($name+"_l_hand_base_mocap") ;
select -hi;
select -d  ($name+"_l_hand_base_mocap") ;
select -d  ($name+"_l_fing_middle_base_mocap");
doDelete;

setAttr ($name+"_LArmSetting.FkIk")  0;
setAttr ($name+"_RArmSetting.FkIk")  0;
setAttr ($name+"_LLegSetting.FkIk")  0;
setAttr ($name+"_RLegSetting.FkIk")  0;
setAttr ($name+"_NeckSetting.FkIk")  0;

select -cl  ;
select -r ($name+"_torso_base_mocap") ;
select -hi;
FreezeTransformations;
makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;

select -r ($name+"_l_upLeg_1_mocap") ;
joint -e  -oj xzy -secondaryAxisOrient xdown -ch -zso;

select -r ($name+"_r_upLeg_1_mocap") ;
joint -e  -oj xyz -secondaryAxisOrient yup -ch -zso;


select -r ($name+"_r_upArm_base_mocap") ;
joint -e  -oj xzy -secondaryAxisOrient zdown -ch -zso;
select -cl;  
//setAttr ($name+"_l_hand_base_mocap.rotateAxisZ" 180;
delete ($name+"_r_fing_middle_base_mocap") ;
delete ($name+"_l_fing_middle_base_mocap") ;



orientConstraint -mo  ($name+"_r_upArm_base_mocap")  ($name+"_r_fk_upArm_anim");
orientConstraint -mo  ($name+"_r_lowArm_base_mocap")  ($name+"_r_fk_lowArm_anim");
orientConstraint -mo ($name+"_r_hand_base_mocap")  ($name+"_r_fk_hand_anim");

orientConstraint -mo ($name+"_r_upLeg_1_mocap")  ($name+"_r_fk_upLeg_anim") ;
orientConstraint -mo ($name+"_r_lowLeg_1_mocap")  ($name+"_r_fk_lowLeg_anim") ;
orientConstraint -mo ($name+"_r_foot_mocap")  ($name+"_r_fk_foot_anim") ;
orientConstraint -mo ($name+"_r_toe_mocap")  ($name+"_r_fk_toe_anim") ;

orientConstraint -mo  ($name+"_l_upArm_base_mocap")  ($name+"_l_fk_upArm_anim");
orientConstraint -mo  ($name+"_l_lowArm_base_mocap")  ($name+"_l_fk_lowArm_anim");
orientConstraint -mo ($name+"_l_hand_base_mocap")  ($name+"_l_fk_hand_anim");

orientConstraint -mo ($name+"_l_upLeg_1_mocap")  ($name+"_l_fk_upLeg_anim") ;
orientConstraint -mo ($name+"_l_lowLeg_1_mocap")  ($name+"_l_fk_lowLeg_anim") ;
orientConstraint -mo ($name+"_l_foot_mocap")  ($name+"_l_fk_foot_anim") ;
orientConstraint -mo ($name+"_l_toe_mocap")  ($name+"_l_fk_toe_anim") ;


parentConstraint -mo ($name+"_torso_base_mocap")  ($name+"_body_anim") ;
orientConstraint -mo ($name+"_torso_base_mocap")  ($name+"_hip_anim") ;
select -r ($name+"_torso_*_skin");
$torsoObj=`ls -sl`;
int $torsoMid=size($torsoObj)/2;
pointConstraint -mo  ($name+"_torso_"+$torsoMid+"_mocap")  ($name+"_torso_anim");

parentConstraint -mo ($name+"_torso_end_mocap")  ($name+"_shoulder_anim");

orientConstraint -mo ($name+"_r_shoulder_mocap")  ($name+"_r_shoulder_anim") ;

select -r ($name+"_neck_*_mocap");
$neckJnt=`ls -sl`;
size($neckJnt);
orientConstraint -mo ($name+"_neck_base_mocap")  ($name+"_neck_base_fk_anim") ;
for($i=1;$i<size($neckJnt);$i++)
orientConstraint -mo ($name+"_neck_"+$i+"_mocap") ($name+"_neck_"+$i+"_fk_anim") ;
 
orientConstraint -mo  ($name+"_head_mocap")  ($name+"_head_fk_anim") ;
parentConstraint -mo  ($name+"_head_mocap")  ($name+"_head_ik_anim");

parentConstraint -mo ($name+"_l_foot_mocap")  ($name+"_l_foot_anim") ;
pointConstraint  ($name+"_l_foot_mocap")  ($name+"_l_knee_anim") ;
parentConstraint -mo ($name+"_r_foot_mocap")  ($name+"_r_foot_anim") ;
pointConstraint  ($name+"_r_foot_mocap")  ($name+"_r_knee_anim") ;
parentConstraint -mo ($name+"_l_hand_base_mocap")  ($name+"_l_ik_hand_anim");
orientConstraint -mo ($name+"_l_hand_base_mocap")  ($name+"_l_fk_hand_elbow_anim");
parentConstraint -mo ($name+"_l_lowArm_base_mocap")  ($name+"_l_ik_elbow_anim");
parentConstraint -mo ($name+"_r_hand_base_mocap")  ($name+"_r_ik_hand_anim");
orientConstraint -mo ($name+"_r_hand_base_mocap")  ($name+"_r_fk_hand_elbow_anim");
parentConstraint -mo ($name+"_r_lowArm_base_mocap")  ($name+"_r_ik_elbow_anim");
}

global proc string asSelectorScriptLocation ()
{
int $selectMode=0;
string $whatIs=`whatIs asSelectorScriptLocation`;
string $fullPath=`substring $whatIs 25 999`;
string $buffer[];
int $numTok=`tokenize $fullPath "/" $buffer`;
if ($numTok<2)
	if (`about -win`)
		$numTok=`tokenize $fullPath "\\" $buffer`;
int $numLetters=size($fullPath);
int $numLettersLastFolder=size($buffer[$numTok-1]);
string $scriptLocation=`substring $fullPath 1 ($numLetters-$numLettersLastFolder)`;
return $scriptLocation;
}
global proc wfanimButton (string $name,int $ButtonNum)
{
string $nameC=$name;
if ($ButtonNum==1) wfFKTOIK($name); 
if ($ButtonNum==2) wfIKTOFK($name); 
if ($ButtonNum==3) wfCopy($name); 
if ($ButtonNum==4) wfPaste($name); 
if ($ButtonNum==5) wfMirrorPaste($name); 
if ($ButtonNum==6) wfReset($name); 
if ($ButtonNum==7) wfResetAll($name); 
if ($ButtonNum==8) mocapSkleton($name); 
if ($ButtonNum==9) wfSaveBiped($name);
if ($ButtonNum==10) wfLoadBiped($name);
if ($ButtonNum==11) {$natureVar=getAttr ($name+"_LLegSetting.nature"); if ($natureVar==0) BipedWalkCycle($name,$nameC);else if ($natureVar==2) BirdWalkCycle($name);else if ($natureVar==1) QuadrupedWalkCycle($name);}
if ($ButtonNum==12) {$natureVar=getAttr ($name+"_LLegSetting.nature"); if ($natureVar==0) BipedRunCycle($name,$nameC);else if ($natureVar==2) BirdRunCycle($name);else if ($natureVar==1) QuadrupedRunCycle($name);}
if ($ButtonNum==13) 
{
    $natureVar=getAttr ($name+"_LLegSetting.nature");
     if ($natureVar==0||$natureVar==2) 
     { if (`objExists(($name+"_WalkCycle"))`) BipedWalkFootStepA($name,$name); else if (`objExists(($name+"_RunCycle"))`) BipedRunFootStepA($name,$name);}else  if ($natureVar==1)
     { if (`objExists(($name+"_WalkCycle"))`)  QuadrupedWalkFootStepA($name); else if (`objExists(($name+"_RunCycle"))`) QuadrupedRunFootStepA($name);}
}
if ($ButtonNum==14)
{
    $natureVar=getAttr ($name+"_LLegSetting.nature");
     if ($natureVar==0||$natureVar==2) 
     { if (`objExists(($name+"_WalkCycle"))`) BipedWalkFootStepB($name,$name); else if (`objExists(($name+"_RunCycle"))`) BipedRunFootStepB($name,$name);}else  if ($natureVar==1)
     { if (`objExists(($name+"_WalkCycle"))`)  QuadrupedWalkFootStepB($name); else if (`objExists(($name+"_RunCycle"))`) QuadrupedRunFootStepB($name);}
}
if ($ButtonNum==15) {$natureVar=getAttr ($name+"_LLegSetting.nature"); if ($natureVar==0||$natureVar==2||$natureVar==1) DeletePathWalk($name);}
if ($ButtonNum==16)
 {
if (`objExists(($name+"_WalkCycle"))`){autoKeyframe -state false; delete ($name+"_WalkCycle");  wfResetAll($name);}
if (`objExists(($name+"_RunCycle"))`) {autoKeyframe -state false; delete ($name+"_RunCycle");  wfResetAll($name);}
if (`objExists(($name+"_FlyCycle"))`) {autoKeyframe -state false; delete ($name+"_FlyCycle");  wfResetAll($name);}
}
if ($ButtonNum==17) wfaddLayer($name); 
if ($ButtonNum==18) wfChangeCycleSpeed($name); 
if ($ButtonNum==19) {
global string $jointModel[];
global string $cBlend;
global string $models[];
global string $angAxis ;
$jointModel=`ls -sl`;
$cBlend=$jointModel[0];
select -r $jointModel[1];
$models=`ls -sl`;
select -r $jointModel;
$angAxis = CreateCorrectiveShapes($name);
textField -e -text  $angAxis angleBox;

}
if ($ButtonNum==20) {
$cBlend=`textField -q -text  nameBox1` ;
$modelss=`textField -q -text  nameBox2` ;
$angAxis=`textField -q -text  angleBox` ;
ApplyCorrectiveShape($name,$angAxis,$modelss,$cBlend);
}

 }  
 
global proc wfReset(string $name)
{
    $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=1;
        int $index =$dd+$nn*100;
        if ($index==3||$index==7||$index==9||$index==11||$index==13||$index==15||$index==16) wfResetBiped ($newName);
        if ($index==103||$index==107||$index==109||$index==111||$index==113||$index==115||$index==116) wfResetQuadruped ($newName);
        if ($index==203||$index==207||$index==209||$index==211||$index==213||$index==215||$index==216) wfResetBird ($newName);
        }
  }
}
select -r $ss ;
}

global proc wfResetAll(string $name)
{
    $newName=$name;
}

global proc wfFKTOIK(string $name)
{
    $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=1;
        int $index =$dd+$nn*100;
        if ($index==3||$index==7||$index==9||$index==11) biped_matchfkik ($newName,$ee);
        if ($index==103||$index==107||$index==109||$index==111) quadruped_matchfkik  ($newName,$ee);
        if ($index==203||$index==207||$index==209||$index==211) bird_matchfkik ($newName,$ee);
        }
  }
}
select -r $ss ;
}

global proc wfIKTOFK(string $name)
{
        $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=0;
        int $index =$dd+$nn*100;
        if ($index==3||$index==7||$index==9||$index==11) biped_matchfkik ($newName,$ee);
        if ($index==103||$index==107||$index==109||$index==111) quadruped_matchfkik  ($newName,$ee);
        if ($index==203||$index==207||$index==209||$index==211) bird_matchfkik ($newName,$ee);
        }
  }
}
select -r $ss ;
}

global proc wfCopy(string $name)
{
        $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=0;
        int $index =$dd+$nn*100;
        if ($index==9) biped_LArmMirror($newName,$ee);
        if ($index==11) biped_RArmMirror($newName,$ee);
        if ($index==3) biped_LLegMirror($newName,$ee);
        if ($index==7) biped_RLegMirror($newName,$ee);
        if ($index==109) quadruped_LLegBMirror ($newName,$ee);
        if ($index==111) quadruped_RLegBMirror ($newName,$ee);
        if ($index==103) quadruped_LLegMirror ($newName,$ee);
        if ($index==107) quadruped_RLegMirror ($newName,$ee);
        if ($index==209) bird_LArmMirror ($newName,$ee);
        if ($index==211) bird_RArmMirror ($newName,$ee);
        if ($index==203)  bird_LLegMirror ($newName,$ee);
        if ($index==207)  bird_RLegMirror ($newName,$ee);
        }
  }
}
select -r $ss ;
}

global proc wfPaste(string $name)
{
        $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=1;
        int $index =$dd+$nn*100;
        if ($index==9) biped_LArmMirror($newName,$ee);
        if ($index==11) biped_RArmMirror($newName,$ee);
        if ($index==3) biped_LLegMirror($newName,$ee);
        if ($index==7) biped_RLegMirror($newName,$ee);
        if ($index==109) quadruped_LLegBMirror ($newName,$ee);
        if ($index==111) quadruped_RLegBMirror ($newName,$ee);
        if ($index==103) quadruped_LLegMirror ($newName,$ee);
        if ($index==107) quadruped_RLegMirror ($newName,$ee);
        if ($index==209) bird_LArmMirror ($newName,$ee);
        if ($index==211) bird_RArmMirror ($newName,$ee);
        if ($index==203)  bird_LLegMirror ($newName,$ee);
        if ($index==207)  bird_RLegMirror ($newName,$ee);
        }
  }
}
select -r $ss ;
}

global proc wfMirrorPaste(string $name)
{
        $newName=$name;
$ss=`ls -sl`;
if (`size $ss` == 1)
{    
string $sel_attr[]=`listAttr  $ss`;

for ($sel in $sel_attr)
 {
     if($sel=="nature")
         {
        int $dd=`getAttr $ss.index`;
        int $nn=`getAttr $ss.nature`;
        int $ee=2;
        int $index =$dd+$nn*100;
        if ($index==9) biped_LArmMirror ($newName,$ee);
        if ($index==11) biped_RArmMirror ($newName,$ee);
        if ($index==3)  biped_LLegMirror ($newName,$ee);
        if ($index==7)  biped_RLegMirror ($newName,$ee);
        if ($index==109) quadruped_LLegBMirror ($newName,$ee);
        if ($index==111) quadruped_RLegBMirror ($newName,$ee);
        if ($index==103) quadruped_LLegMirror ($newName,$ee);
        if ($index==107) quadruped_RLegMirror ($newName,$ee);
        if ($index==209) bird_LArmMirror ($newName,$ee);
        if ($index==211) bird_RArmMirror ($newName,$ee);
        if ($index==203)  bird_LLegMirror ($newName,$ee);
        if ($index==207)  bird_RLegMirror ($newName,$ee);
        }
  }
}
select -r $ss ;
}

////////////////////////////  

 global proc wfFacialWin(string $name) { 
if (`window -exists "Facial"`){  deleteUI -window  "Facial" ;}
string $window = `window   Facial`;
columnLayout characterName;
			rowColumnLayout  -nc 2
			-columnWidth 1 245;
radioButtonGrp  -cw 1 50 -cw 2 45 -cw 3 45 -numberOfRadioButtons 3 -sl 1 
 -on1  "setAttr \"polySmoothFace3.divisions\" 0;" -on2  "setAttr \"polySmoothFace3.divisions\" 1;" -on3  "setAttr \"polySmoothFace3.divisions\" 2;"
    -label "Smooth" -labelArray3 "0" "1" "2" rarmorient ;
    button -w 90 -h 30 -bgc .5 .5 .5 -c ResetFacial -l "Reset All" resetall ;
               setParent  Facial;
paneLayout  -w 340 -h 520 -bgc 0 0 0;
modelEditor -cam ($name+"_FacialCam") -nc 1 -gr 0 -da "flatShaded";
showWindow $window;
}

global proc DeletePathWalk(string $name)
{
//currentTime 0 ;
    cycleCheck -e off;
delete ($name+"_CycleOnPath");
delete ($name+"_walkPath");
setAttr ($name+"_all_anim.translateX") (`getAttr  ($name+"_all_anim.txBase")`);
setAttr ($name+"_all_anim.translateY") (`getAttr  ($name+"_all_anim.tyBase")`);
setAttr ($name+"_all_anim.translateZ") (`getAttr  ($name+"_all_anim.tzBase")`);
setAttr ($name+"_all_anim.rotateX") (`getAttr  ($name+"_all_anim.rxBase")`);
setAttr ($name+"_all_anim.rotateY") (`getAttr  ($name+"_all_anim.ryBase")`);
setAttr ($name+"_all_anim.rotateZ") (`getAttr  ($name+"_all_anim.rzBase")`);
deleteAttr -attribute "txBase" ($name+"_all_anim");
deleteAttr -attribute "tyBase" ($name+"_all_anim");
deleteAttr -attribute "tzBase" ($name+"_all_anim");
deleteAttr -attribute "rxBase" ($name+"_all_anim");
deleteAttr -attribute "ryBase" ($name+"_all_anim");
deleteAttr -attribute "rzBase" ($name+"_all_anim");
    cycleCheck -e on;
    
    setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
}//$name="name";DeleteCycle("name");


global proc wfaddLayer(string $name)
{
    $ss=`ls -sl`;
if (`objExists BaseAnimation`)
{
    $aa=`animLayer -query -c BaseAnimation` ;
    $num=size($aa);
    select -r  ($name+"_anim_Set") ;
    select -d ($name+"_all_anim") ;
    animLayer  ($name+"_animLayer_"+$num);
    setAttr ($name+"_animLayer_"+$num+".scaleAccumulationMode") 1;
    animLayer -e -addSelectedObjects ($name+"_animLayer_"+$num);
}else
{
    $num=1;
    select -r  ($name+"_anim_Set") ;
    select -d ($name+"_all_anim") ;
    animLayer  ($name+"_animLayer_"+$num);
    setAttr ($name+"_animLayer_"+$num+".scaleAccumulationMode") 1;
    animLayer -e -addSelectedObjects ($name+"_animLayer_"+$num);
    }
    select -r $ss;
}

global proc wfChangeCycleSpeed(string $name)
{
float $CycleSpeed = `floatField -q -v CYCLESPEED`;
selectKey -add -k "*";
scaleKey -iub false -ts (1/$CycleSpeed) -tp 0 -fs 0 -fp 0 -vs 1 -vp 0 ;
int $lastFrame =`findKeyframe -which last ($name+"_r_foot_anim")`;
playbackOptions -maxTime $lastFrame;
setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
}



global proc js_matchObj ()
{

    string $objs[0];
    $objs = `ls -sl`;
   
    string $obj;

    // before doing anything, we have to duplicate all the matching objects and put the duplicates in world space
    // then we'll match, then delete the duplicates.  this keeps previous matching objects from affecting new matching
    // objects
    string $matches[0];
    for ($x = 0; $x < size($objs); $x++)
    {
        $obj = $objs[$x];
        $match_obj = `js_getMatchObj $obj`;

        if ($match_obj != "")
        {
            $dup = `duplicate -rr $match_obj`;
            string $p[0];
            $p = `listRelatives -f -p $dup[0]`;
            if ($p[0] != "")
                parent -w $dup[0];

            $matches[$x] = $dup[0];
        }
    }
    print ("// Setting PRE attributes..\n");
    for ($x=0; $x < size($objs); $x++)
    {
        $obj = $objs[$x];
        // now we're going to look for all the specific match attributes.
        // PRE ATTRIBUTES
        // 
        // find all the pre attributes and set them to the defaults.
        //
        string $match_obj;
        string $match_const;
        string $match_attr[0];
  
        string $match_pre[0];
        $match_pre = `js_getPrePostAttributes $obj "pre"`;
        
        string $item;
        for ($item in $match_pre)
        {
            string $break[0];
            tokenize ($item, ":", $break);
            
            // now reset the attributes
            $cmd = ("setAttr " + $obj + "." + $break[0] +" " + $break[1]);
            evalEcho $cmd;
        }
    }

    for ($x=0; $x < size($objs); $x++)
    {
        
        $obj = $objs[$x];
        print ("// Matching " + $obj + "\n");
        // MATCH POSITION
        //
        // match the object, if there's one to match to
        //$match_obj = `js_getMatchObj $obj`;
        $match_obj = $matches[$x];
        $match_const = `js_getMatchConst $obj`;
    
        if (($match_obj != "") && ($match_const != ""))
        {
            print ("js_matchTheObj " + $obj + " " + $match_obj + " " + $match_const + "\n");
            // okay, we're going to match what's available.
            js_matchTheObj $obj $match_obj $match_const;
            
        }
    }
    if (size($matches) > 0)
        delete $matches;

    for ($x = 0; $x < size($objs); $x++)
    {
        print ("// Iteration attributes..\n");
        $obj = $objs[$x];
        string $match_iterate[0];
        // ITERATIONS
        //
        // now we're going to go through our iteration attributes
        $match_iterate = `js_getIterations $obj`;
        if (size($match_iterate) > 0)
        {
            for ($iter in $match_iterate)
            {
                eval $iter;        
            }
        }

        // ATTRIBUTES
        //
        // finally, we'll go through the attributes
        //$match_attr = `js_getMatchAttributes $obj`;
        //evalEcho $match_attr;

    }

    for ($x = 0; $x < size($objs); $x++)
    {
        print ("// Post attributes..\n");
        $obj = $objs[$x];
        // Post
        string $match_obj;
        string $match_const;
        string $match_attr[0];
  
        string $match_pre[0];
        $match_pre = `js_getPrePostAttributes $obj "post"`;
        
        string $item;
        for ($item in $match_pre)
        {
            string $break[0];
            tokenize ($item, ":", $break);
            
            // now reset the attributes
            setAttr ($obj + "." + $break[0]) $break[1];
        }
    }

    if (size($objs) > 0)
        select $objs;

}

global proc string[] js_getMatchAttributes (string $obj)
{
    // this procedure involves searching for the attributes that match "attr_"
    string $result[0];
    string $attrAttrs[0];
    $attrAttrs = `listAttr -string "match_attr*" -ud $obj`;
   
    // we have all the attrAttributes, now we just need to build the commands
    string $attr[0];
    string $objAttr[0];
    
    string $item;
    for ($item in $attrAttrs)
    {
        string $break[0];
        tokenize ($item, "_", $break);
        
        // break[2] is the iteration number, break[3] is the type
        int $num = $break[1];
        $num = $num-1;
        switch ($break[3])
        {
            case "attr":
                   $attr[$num] = `getAttr ($obj + "." + $item)`;
                break;
            case "obj":
                string $con[0];
                $con = `listConnections -p true ($obj + "." + $item)`;
                $objAttr[$num] = $con[0];
                break;
        }
    }
    
    // now we've got everything broken up.  get the size of $attr
    $size = `size($attr)`;

    // now go through the number of attrs to get the right command
    for ($x = 0; $x < $size; $x++)
    {
        $result[$x] = ("js_copyAttr " +$obj + "." + $attr[$x] + " " + $objAttr[$x]); 
    }
    return $result;
}

global proc js_copyAttr (string $objAttr, string $targetObjAttr )
{
    // get the value of $targetObjAttr and apply it to $objAttr
    $value = `getAttr $targetObjAttr`;
    setAttr $objAttr $value;
}
global proc string[] js_getPrePostAttributes (string $obj, string $type)
{
    string $result[0];
    int $count = 0;
    string $preAttrs[0];
    $preAttrs = `listAttr -string ("match_"+$type+"*") -ud $obj`;
    string $attr;
    for ($attr in $preAttrs)
    {
        string $break[0];
        tokenize ($attr, "_", $break);

        // $break[0] = match
        // $break[1] = type
        // $break[2] = #
        // $break[3] = attribute
        $attribute = $break[3];
        $value = `getAttr ($obj + "." + $attr)`;

        $result[$count++] = ($attribute + ":" + $value);
    }
    return $result;

}
global proc string[] js_getIterations (string $obj)
{
    // we'll search for iterations and build the js_iterate string
    string $result[0];
    string $itrAttrs[0];
    $itrAttrs = `listAttr -string "match_iterate*" -ud $obj`;

    // we have all the itrAttributes, now we just need to build the proper commands
    string $min[0]; clear $min; 
    string $max[0]; clear $max;
    string $iter[0]; clear $iter;
    string $object[0]; clear $object;
    string $target[0]; clear $target;
    string $attr[0]; clear $attr;

    string $item;
    for ($item in $itrAttrs)
    {
        string $break[0];
        tokenize ($item, "_", $break);
        
        // break[2] is the iteration number, break[3] is the type
        int $num = $break[2];
        $num = $num-1;
        switch ($break[3])
        {
            case "min":
                   $min[$num] = `getAttr ($obj + "." + $item)`;
                break;
            case "max":
                   $max[$num] = `getAttr ($obj + "." + $item)`;
                break;
            case "iter":
                   $iter[$num] = `getAttr ($obj + "." + $item)`;
                break;
            case "attr":
                   $attr[$num] = `getAttr ($obj + "." + $item)`;
                break;
            case "object":
                string $con[0];
                $con = `listConnections -p true ($obj + "." + $item)`;
                $object[$num] = $con[0];
                break;
            case "target":
                $con = `listConnections -p true ($obj + "." + $item)`;
                $target[$num] = $con[0];
                break;
            
        }   
    }

    // now we've got everything broken up.  get the size of $min
    $size = `size($min)`;

    // now go through the number of iters to get the right command
    for ($x = 0; $x < $size; $x++)
    {
        $result[$x] = ("js_iterator " + $min[$x] + " " + $max[$x] + " " + $obj + "."+$attr[$x] + " " + $object[$x] + " " + $target[$x] + " " + $iter[$x]);
    }
    return $result;
}

global proc js_matchTheObj (string $obj, string $match_obj, string $match_const)
{
    // first figure out what kind of matching we're going to be doing
    int $trans = 0;
    int $orient = 0;
    int $scale = 0;

    if (`gmatch $match_const "*t*"`)
        $trans = 1;
    if (`gmatch $match_const "*r*"`)
        $orient = 1;
    if (`gmatch $match_const "*s*"`)
        $scale = 1;

    if (($trans == 1) || ($orient == 1) || ($scale == 1))
    {
        string $pc[0], $oc[0], $sc[0];

        // okay, we can match something
        //
        // first duplicate the object, we'll use this duplciate to get the correct placement
        $dup = `duplicate -rr $obj`;

        // unlock all attributes of $dup
        $attrs = { "t", "tx", "ty", "tz", "r", "rx", "ry", "rz", "s", "sx", "sy", "sz" };
        for ($at in $attrs)
        {
            setAttr -l 0 ($dup[0] + "." + $at);
        }

        // now constrain the duplicate to the match_object
        select $match_obj $dup[0];

        if ($trans)
            $pc = `pointConstraint`;
        if ($orient)
            $oc = `orientConstraint`;
        if ($scale)
            $sc = `scaleConstraint`;
       

        // get the trans and rotate values
       
        if ($trans)
        {
            $t = `getAttr ($dup[0] + ".translate")`;
            js_setAttr $obj "t" $t;
            //setAttr ($obj + ".t") $t[0] $t[1] $t[2];
        }
        if ($orient)
        {
            $r = `getAttr ($dup[0] + ".rotate")`;
            js_setAttr $obj "r" $r;
            //setAttr ($obj + ".r") $r[0] $r[1] $r[2];
        }
       
        if ($scale)
        {
            $s = `getAttr ($dup[0] + ".scale")`;
            js_setAttr $obj "s" $s;
            //setAttr ($obj + ".s") $s[0] $s[1] $s[2];
        }
       
        if ($trans)
            delete $pc;
        if ($orient)
            delete $oc;
        if ($scale)
            delete $sc;

        // now delete the duplicate
        delete $dup[0];

    }
}

global proc js_setAttr (string $obj, string $at, float $values[] )
{
    // sets a series of attributes, but only if the attribute is unlocked
    string $attrs[0];
    $attrs[0] = ($at + "x");
    $attrs[1] = ($at + "y");
    $attrs[2] = ($at + "z");

    for ($x = 0; $x <=2; $x++)
    {
        if (!`getAttr -l ($obj + "." + $attrs[$x])`)
        {
            setAttr ($obj + "." + $attrs[$x]) $values[$x];
        }
    }
}
global proc string js_getMatchConst (string $obj)
{
    // return the constraints
    string $return;
    if (`attributeQuery -exists -node $obj "match_const"`)
    {
        $return = `getAttr ($obj + ".match_const")`;
    }
    return $return;
}
global proc string js_getMatchObj (string $obj)
{
    // return the match object
    string $return;
    if (`attributeQuery -exists -node $obj "match_obj"`)
    {
        select $obj;
        string $con[0];
        $con = `js_getAttachedObjects "match_obj"`;
        
        $return = $con[0];
    }
    return $return;
    
}

global proc string[] js_getAttachedObjects (string $attribute)
{
    // this will look at the selected objects and return a list of the attached
    // objects
    string $objs[0];
    $objs = `ls -sl`;
    string $return[0];
    int $count = 0;
    for ($obj in $objs)
    {
        if (!`attributeQuery -exists -node $obj $attribute`)
            warning ($attribute + " does not exist on " + $obj + ".. skipping..");
        string $con[0];
        $con = `listConnections ($obj + "." + $attribute)`;
        int $size = size($con);
        appendStringArray ($return, $con, $size);
    }
    return $return;
}


global proc js_iterator (float $minIn, float $maxIn, string $objAttr, string $obj, string $targetObj, int $numIterations)
{
    
    float $min = 0.000000;
    float $max = 0.000000;
    $min = $minIn;
    $max = $maxIn;
    float $minDist = 0.000000;
    float $maxDist = 0.000000;
    vector $pos1;
    vector $pos2;
    // check and see if $targetObj and $obj are attributes other than .message
    string $objBreak[0];
    string $targetObjBreak[0];
    tokenize ($obj, ".", $objBreak);
    tokenize ($targetObj, ".", $targetObjBreak);

    if ($objBreak[1] == "")
        $objBreak[1] = "message";
    if ($targetObjBreak[1] == "")
        $targetObjBreak[1] = "message";

    if (($objBreak[1] == "message") && ($targetObjBreak[1] == "message"))
    {
        //print ("Position.\n");
        $obj = $objBreak[0];
        $targetObj = $targetObjBreak[0];
        $pos2 = `xform -q -ws -rp $targetObj`;

        // check and see if autokeyframe is turned on
        //
        $autoKeyframe = `autoKeyframe -q -state`;
        
        // turn it off
        //
        autoKeyframe -state off;
        for ($x = 0; $x < $numIterations; $x++)
        {
            // if we're on the last iteration, turn autoKeyframe back on so the value will save
            if ($x == ($numIterations-1))
            {
                autoKeyframe -state $autoKeyframe;
            }
            // get the position of $obj and $targetObj
            setAttr $objAttr $min;
            $pos1 = `xform -q -ws -rp $obj`;
            $minDist = mag($pos2 - $pos1);

            setAttr $objAttr $max;
            $pos1 = `xform -q -ws -rp $obj`;
            $maxDist = mag($pos2 - $pos1);
        
            $half = (($max - $min)/2 + $min);
            //print ("Iteration: " + $x + " - Min: " + $min + " Max: " + $max + " MinDist: " + $minDist + " Max Dist: " + $maxDist + " Half: " + $half + "\n");
            
            if ($minDist > $maxDist)
            {
                $min = $half;
            }
            else if ($minDist < $maxDist)
            {
                $max = $half; 
            }
            else if ($minDist == $maxDist)
            {
                $min = $min + .00001;
            }
            
        }
    }
    else
    {
        //print ("attribute\n");
        // they're attributes..  make sure that NEITHER are .message
        if (($objBreak[1] == "message") || ($targetObjBreak[1] == "message"))
        {
            error ("Can't connect a message attribute to a regular attribute.  Exiting..");
        }

        // okay, we know that they're two separate attrs.. let's get this going!
        $obj = ($objBreak[0] + "." + $objBreak[1]);

        $targetObj = $targetObjBreak[0];
        $targetObjAttr = $targetObjBreak[1];

        float $targetValue = `getAttr ($targetObj + "." + $targetObjAttr)`;
        //print ("$obj " + $obj + "\n");
        //print ("targetObj: " + $targetObj + "\n");
        //print ("targetObjAttr: " + $targetObjAttr + "\n");

        //print ("target value: " + $targetValue + "\n");
        
        for ($x = 0; $x < $numIterations; $x++)
        {
            float $minDist = 0.00000;
            float $maxDist = 0.00000;
            float $half = 0.00000000; 
            float $v1 = 0.00000;
            float $v2 = 0.00000;
            // get the value
            //print ("setting " + $objAttr + " to min:" + $min + "\n");
            setAttr $objAttr $min;
            $v1 = `getAttr $obj`;
            //print ("Obj " + $obj + " value " + $v1 + "\n");
            $minDist = abs($targetValue - $v1);

            //print ("Min dist: " + $minDist + "\n");
            setAttr $objAttr $max;
            //print ("setting " + $objAttr + " to max:" + $max + "\n");
            $v2 = `getAttr $obj`;
            //print ("Obj " + $obj + " value " + $v2 + "\n");
            $maxDist = abs($targetValue - $v2);
            //print ("Max dist: " + $maxDist + "\n");
            $half = (($max - $min)/2 + $min);
            //print ("half: " + $half + "\n");
            //print ("Iteration: " + $x + " - Min: " + $min + " Max: " + $max + " MinDist: " + $minDist + " Max Dist: " + $maxDist + " Half: " + $half + "\n");
            
            if ($minDist > $maxDist)
            {
                //print ("min is further\n"); 
                $min = $half;
            }
            else
            {
                //print ("max is further\n");
                $max = $half; 
            }
            
        }
    }
}


global proc wfResetBiped (string $name)
{
$ss=`ls -sl`;
if (`size $ss` == 1)
{string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="nature"){
int $dd=`getAttr $ss.index`;
int $index =$dd;
string $prefix=$name;
switch($index)
{
case 3:

if ( catch( `setAttr ($name+"_l_knee_curve_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_knee_curve_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_knee_curve_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_knee_curve_anim.translateZ") 0` ) )   print "";

setAttr ($name+"_l_foot_anim.translateX") 0 ;
setAttr ($name+"_l_foot_anim.translateY") 0 ;
setAttr ($name+"_l_foot_anim.translateZ") 0 ;
setAttr ($name+"_l_foot_anim.rotateX") 0 ;
setAttr ($name+"_l_foot_anim.rotateY") 0 ;
setAttr ($name+"_l_foot_anim.rotateZ") 0 ;
setAttr ($name+"_l_foot_anim.roll") 0 ;
setAttr ($name+"_l_foot_anim.toeLift") 45 ;
setAttr ($name+"_l_foot_anim.toeStraight") 75 ;
setAttr ($name+"_l_foot_anim.lean") 0 ;
setAttr ($name+"_l_foot_anim.side") 0 ;
setAttr ($name+"_l_foot_anim.toeSpin") 0 ;
setAttr ($name+"_l_foot_anim.toeWiggle") 0 ;
setAttr ($name+"_l_foot_anim.kneeSpin") 0 ;
setAttr ($name+"_l_foot_anim.upLegLength") 1 ;
setAttr ($name+"_l_foot_anim.lowLegLength") 1 ;
setAttr ($name+"_l_knee_anim.translateX") 0 ;
setAttr ($name+"_l_knee_anim.translateY") 0 ;
setAttr ($name+"_l_knee_anim.translateZ") 0 ;
setAttr ($name+"_l_knee_anim.stretch") 0 ;
setAttr ($name+"_l_fk_toe_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_toe_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_toe_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_toe_anim.length") 1 ;
setAttr ($name+"_l_fk_foot_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_foot_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_foot_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_foot_anim.length") 1 ;
setAttr ($name+"_l_fk_lowLeg_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_lowLeg_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_lowLeg_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_lowLeg_anim.length") 1 ;
setAttr ($name+"_l_lowLeg_middle_anim.translateY") 0 ;
setAttr ($name+"_l_lowLeg_middle_anim.translateZ") 0 ;
setAttr ($name+"_l_fk_upLeg_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_upLeg_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_upLeg_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_upLeg_anim.length") 1 ;
setAttr ($name+"_l_upLeg_middle_anim.translateY") 0 ;
setAttr ($name+"_l_upLeg_middle_anim.translateZ") 0 ;
//setAttr ($name+"_LLegSetting.FkIk") 1 ;
setAttr ($name+"_LLegSetting.curveCtrl") 0 ;
setAttr ($name+"_LLegSetting.kneeVis") 0 ;
break;
case 7:

if ( catch( `setAttr ($name+"_r_knee_curve_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_knee_curve_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_knee_curve_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_knee_curve_anim.translateZ") 0` ) )   print "";

setAttr ($name+"_r_foot_anim.translateX") 0 ;
setAttr ($name+"_r_foot_anim.translateY") 0 ;
setAttr ($name+"_r_foot_anim.translateZ") 0 ;
setAttr ($name+"_r_foot_anim.rotateX") 0 ;
setAttr ($name+"_r_foot_anim.rotateY") 0 ;
setAttr ($name+"_r_foot_anim.rotateZ") 0 ;
setAttr ($name+"_r_foot_anim.roll") 0 ;
setAttr ($name+"_r_foot_anim.toeLift") 45 ;
setAttr ($name+"_r_foot_anim.toeStraight") 75 ;
setAttr ($name+"_r_foot_anim.lean") 0 ;
setAttr ($name+"_r_foot_anim.side") 0 ;
setAttr ($name+"_r_foot_anim.toeSpin") 0 ;
setAttr ($name+"_r_foot_anim.toeWiggle") 0 ;
setAttr ($name+"_r_foot_anim.kneeSpin") 0 ;
setAttr ($name+"_r_foot_anim.upLegLength") 1 ;
setAttr ($name+"_r_foot_anim.lowLegLength") 1 ;
setAttr ($name+"_r_knee_anim.translateX") 0 ;
setAttr ($name+"_r_knee_anim.translateY") 0 ;
setAttr ($name+"_r_knee_anim.translateZ") 0 ;
setAttr ($name+"_r_knee_anim.stretch") 0 ;
setAttr ($name+"_r_fk_toe_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_toe_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_toe_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_toe_anim.length") 1 ;
setAttr ($name+"_r_fk_foot_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_foot_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_foot_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_foot_anim.length") 1 ;
setAttr ($name+"_r_fk_lowLeg_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_lowLeg_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_lowLeg_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_lowLeg_anim.length") 1 ;
setAttr ($name+"_r_lowLeg_middle_anim.translateY") 0 ;
setAttr ($name+"_r_lowLeg_middle_anim.translateZ") 0 ;
setAttr ($name+"_r_fk_upLeg_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_upLeg_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_upLeg_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_upLeg_anim.length") 1 ;
setAttr ($name+"_r_upLeg_middle_anim.translateY") 0 ;
setAttr ($name+"_r_upLeg_middle_anim.translateZ") 0 ;
//setAttr ($name+"_RLegSetting.FkIk") 1 ;
setAttr ($name+"_RLegSetting.curveCtrl") 0 ;
setAttr ($name+"_RLegSetting.kneeVis") 0 ;
break;
case 9:

if ( catch( `setAttr ($name+"_l_fing_index_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_index_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_middle_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_ring_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_fing_pinky_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_thumb_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_shoulder_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_shoulder_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_shoulder_anim.translateZ") 0` ) )   print "";


if ( catch( `setAttr ($name+"_l_elbow_curve_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_elbow_curve_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_elbow_curve_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_l_elbow_curve_anim.translateZ") 0` ) )   print "";

setAttr ($name+"_l_shoulder_anim.rotateX") 0 ;
setAttr ($name+"_l_shoulder_anim.rotateY") 0 ;
setAttr ($name+"_l_shoulder_anim.rotateZ") 0 ;

setAttr ($name+"_l_ik_hand_anim.translateX") 0 ;
setAttr ($name+"_l_ik_hand_anim.translateY") 0 ;
setAttr ($name+"_l_ik_hand_anim.translateZ") 0 ;
setAttr ($name+"_l_ik_hand_anim.rotateX") 0 ;
setAttr ($name+"_l_ik_hand_anim.rotateY") 0 ;
setAttr ($name+"_l_ik_hand_anim.rotateZ") 0 ;
setAttr ($name+"_l_ik_elbow_anim.translateX") 0 ;
setAttr ($name+"_l_ik_elbow_anim.translateY") 0 ;
setAttr ($name+"_l_ik_elbow_anim.translateZ") 0 ;
setAttr ($name+"_l_ik_elbow_anim.rotateX") 0 ;
setAttr ($name+"_l_ik_elbow_anim.rotateY") 0 ;
setAttr ($name+"_l_ik_elbow_anim.rotateZ") 0 ;
setAttr ($name+"_l_ik_elbow_anim.stretch") 0 ;
setAttr ($name+"_l_ik_elbow_anim.length") 100 ;
setAttr ($name+"_l_fk_hand_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_hand_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_hand_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_lowArm_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_lowArm_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_lowArm_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_lowArm_anim.length") 1 ;
setAttr ($name+"_l_lowArm_middle_anim.translateY") 0 ;
setAttr ($name+"_l_lowArm_middle_anim.translateZ") 0 ;
setAttr ($name+"_l_fk_upArm_anim.rotateX") 0 ;
setAttr ($name+"_l_fk_upArm_anim.rotateY") 0 ;
setAttr ($name+"_l_fk_upArm_anim.rotateZ") 0 ;
setAttr ($name+"_l_fk_upArm_anim.length") 1 ;
setAttr ($name+"_l_upArm_middle_anim.translateY") 0 ;
setAttr ($name+"_l_upArm_middle_anim.translateZ") 0 ;
setAttr ($name+"_l_upArm_orient_anim.rotateX") -0 ;
setAttr ($name+"_l_upArm_orient_anim.rotateY") 0 ;
setAttr ($name+"_l_upArm_orient_anim.rotateZ") 0 ;
//setAttr ($name+"_LArmSetting.FkIk") 0 ;
setAttr ($name+"_LArmSetting.curveCtrl") 0 ;
setAttr ($name+"_LArmSetting.lowArmState") 1 ;
setAttr ($name+"_LArmSetting.fkOrient") 0 ;
setAttr ($name+"_LArmSetting.ikParent") 2 ;
setAttr ($name+"_l_fingers_anim.bend") 0 ;
setAttr ($name+"_l_fingers_anim.side") 0 ;
setAttr ($name+"_l_fingers_anim.curl") 0 ;
setAttr ($name+"_l_fingers_anim.thumbCurl") 0 ;
setAttr ($name+"_l_fingers_anim.scrunch") 0 ;
setAttr ($name+"_l_fingers_anim.thumbScrunch") 0 ;
setAttr ($name+"_l_fingers_anim.relax") 0 ;
setAttr ($name+"_l_fingers_anim.cup") 0 ;
setAttr ($name+"_l_fingers_anim.spread") 0 ;
setAttr ($name+"_l_fingers_anim.midSpread") 0 ;
setAttr ($name+"_l_fingers_anim.thumbSpread") 0 ;
setAttr ($name+"_l_fingers_anim.twist") 0 ;
setAttr ($name+"_l_fingers_anim.lean") 0 ;
setAttr ($name+"_l_thumb_anim.curl") 0 ;
setAttr ($name+"_l_thumb_anim.scrunch") 0 ;
setAttr ($name+"_l_thumb_anim.spread") 0 ;
setAttr ($name+"_l_thumb_anim.orbit") 0 ;
setAttr ($name+"_l_thumb_anim.twist") 0 ;
setAttr ($name+"_l_thumb_anim.bend_1") 0 ;
setAttr ($name+"_l_thumb_anim.bend_2") 0 ;
setAttr ($name+"_l_thumb_anim.bend_3") 0 ;
setAttr ($name+"_l_thumb_anim.length") 1 ;
setAttr ($name+"_l_pointer_anim.curl") 0 ;
setAttr ($name+"_l_pointer_anim.scrunch") 0 ;
setAttr ($name+"_l_pointer_anim.spread") 0 ;
setAttr ($name+"_l_pointer_anim.twist") 0 ;
setAttr ($name+"_l_pointer_anim.lean") 0 ;
setAttr ($name+"_l_pointer_anim.bend_1") 0 ;
setAttr ($name+"_l_pointer_anim.bend_2") 0 ;
setAttr ($name+"_l_pointer_anim.bend_3") 0 ;
setAttr ($name+"_l_pointer_anim.bend_4") 0 ;
setAttr ($name+"_l_pointer_anim.length") 1 ;
setAttr ($name+"_l_middle_anim.curl") 0 ;
setAttr ($name+"_l_middle_anim.scrunch") 0 ;
setAttr ($name+"_l_middle_anim.spread") 0 ;
setAttr ($name+"_l_middle_anim.twist") 0 ;
setAttr ($name+"_l_middle_anim.lean") 0 ;
setAttr ($name+"_l_middle_anim.bend_1") 0 ;
setAttr ($name+"_l_middle_anim.bend_2") 0 ;
setAttr ($name+"_l_middle_anim.bend_3") 0 ;
setAttr ($name+"_l_middle_anim.bend_4") 0 ;
setAttr ($name+"_l_middle_anim.length") 1 ;
setAttr ($name+"_l_ring_anim.curl") 0 ;
setAttr ($name+"_l_ring_anim.scrunch") 0 ;
setAttr ($name+"_l_ring_anim.spread") 0 ;
setAttr ($name+"_l_ring_anim.twist") 0 ;
setAttr ($name+"_l_ring_anim.lean") 0 ;
setAttr ($name+"_l_ring_anim.bend_1") 0 ;
setAttr ($name+"_l_ring_anim.bend_2") 0 ;
setAttr ($name+"_l_ring_anim.bend_3") 0 ;
setAttr ($name+"_l_ring_anim.bend_4") 0 ;
setAttr ($name+"_l_ring_anim.length") 1 ;
setAttr ($name+"_l_pinky_anim.curl") 0 ;
setAttr ($name+"_l_pinky_anim.scrunch") 0 ;
setAttr ($name+"_l_pinky_anim.spread") 0 ;
setAttr ($name+"_l_pinky_anim.twist") 0 ;
setAttr ($name+"_l_pinky_anim.lean") 0 ;
setAttr ($name+"_l_pinky_anim.bend_1") 0 ;
setAttr ($name+"_l_pinky_anim.bend_2") 0 ;
setAttr ($name+"_l_pinky_anim.bend_3") 0 ;
setAttr ($name+"_l_pinky_anim.bend_4") 0 ;
setAttr ($name+"_l_pinky_anim.length") 1 ;
break;
case 11:

if ( catch( `setAttr ($name+"_r_thumb_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_2_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_3_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_base_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_1_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_2_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_3_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_base_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_1_anim.rotateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_index_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_middle_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_ring_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_2_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_fing_pinky_3_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_base_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_thumb_1_anim.rotateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_shoulder_anim.translateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_shoulder_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_shoulder_anim.translateY") 0` ) )   print "";

if ( catch( `setAttr ($name+"_r_elbow_curve_anim.rotateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_elbow_curve_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_elbow_curve_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_r_elbow_curve_anim.translateZ") 0` ) )   print "";

setAttr ($name+"_r_shoulder_anim.rotateX") 0 ;
setAttr ($name+"_r_shoulder_anim.rotateY") 0 ;
setAttr ($name+"_r_shoulder_anim.rotateZ") 0 ;

setAttr ($name+"_r_ik_hand_anim.translateX") 0 ;
setAttr ($name+"_r_ik_hand_anim.translateY") 0 ;
setAttr ($name+"_r_ik_hand_anim.translateZ") 0 ;
setAttr ($name+"_r_ik_hand_anim.rotateX") 0 ;
setAttr ($name+"_r_ik_hand_anim.rotateY") 0 ;
setAttr ($name+"_r_ik_hand_anim.rotateZ") 0 ;
setAttr ($name+"_r_ik_elbow_anim.translateX") 0 ;
setAttr ($name+"_r_ik_elbow_anim.translateY") 0 ;
setAttr ($name+"_r_ik_elbow_anim.translateZ") 0 ;
setAttr ($name+"_r_ik_elbow_anim.rotateX") 0 ;
setAttr ($name+"_r_ik_elbow_anim.rotateY") 0 ;
setAttr ($name+"_r_ik_elbow_anim.rotateZ") 0 ;
setAttr ($name+"_r_ik_elbow_anim.stretch") 0 ;
setAttr ($name+"_r_ik_elbow_anim.length") 100 ;
setAttr ($name+"_r_fk_hand_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_hand_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_hand_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_lowArm_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_lowArm_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_lowArm_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_lowArm_anim.length") 1 ;
setAttr ($name+"_r_lowArm_middle_anim.translateY") 0 ;
setAttr ($name+"_r_lowArm_middle_anim.translateZ") 0 ;
setAttr ($name+"_r_fk_upArm_anim.rotateX") 0 ;
setAttr ($name+"_r_fk_upArm_anim.rotateY") 0 ;
setAttr ($name+"_r_fk_upArm_anim.rotateZ") 0 ;
setAttr ($name+"_r_fk_upArm_anim.length") 1 ;
setAttr ($name+"_r_upArm_middle_anim.translateY") 0 ;
setAttr ($name+"_r_upArm_middle_anim.translateZ") 0 ;
setAttr ($name+"_r_upArm_orient_anim.rotateX") -0 ;
setAttr ($name+"_r_upArm_orient_anim.rotateY") 0 ;
setAttr ($name+"_r_upArm_orient_anim.rotateZ") 0 ;
//setAttr ($name+"_RArmSetting.FkIk") 0 ;
setAttr ($name+"_RArmSetting.curveCtrl") 0 ;
setAttr ($name+"_RArmSetting.lowArmState") 1 ;
setAttr ($name+"_RArmSetting.fkOrient") 0 ;
setAttr ($name+"_RArmSetting.ikParent") 2 ;
setAttr ($name+"_r_fingers_anim.bend") 0 ;
setAttr ($name+"_r_fingers_anim.side") 0 ;
setAttr ($name+"_r_fingers_anim.curl") 0 ;
setAttr ($name+"_r_fingers_anim.thumbCurl") 0 ;
setAttr ($name+"_r_fingers_anim.scrunch") 0 ;
setAttr ($name+"_r_fingers_anim.thumbScrunch") 0 ;
setAttr ($name+"_r_fingers_anim.relax") 0 ;
setAttr ($name+"_r_fingers_anim.cup") 0 ;
setAttr ($name+"_r_fingers_anim.spread") 0 ;
setAttr ($name+"_r_fingers_anim.midSpread") 0 ;
setAttr ($name+"_r_fingers_anim.thumbSpread") 0 ;
setAttr ($name+"_r_fingers_anim.twist") 0 ;
setAttr ($name+"_r_fingers_anim.lean") 0 ;
setAttr ($name+"_r_thumb_anim.curl") 0 ;
setAttr ($name+"_r_thumb_anim.scrunch") 0 ;
setAttr ($name+"_r_thumb_anim.spread") 0 ;
setAttr ($name+"_r_thumb_anim.orbit") 0 ;
setAttr ($name+"_r_thumb_anim.twist") 0 ;
setAttr ($name+"_r_thumb_anim.bend_1") 0 ;
setAttr ($name+"_r_thumb_anim.bend_2") 0 ;
setAttr ($name+"_r_thumb_anim.bend_3") 0 ;
setAttr ($name+"_r_thumb_anim.length") 1 ;
setAttr ($name+"_r_pointer_anim.curl") 0 ;
setAttr ($name+"_r_pointer_anim.scrunch") 0 ;
setAttr ($name+"_r_pointer_anim.spread") 0 ;
setAttr ($name+"_r_pointer_anim.twist") 0 ;
setAttr ($name+"_r_pointer_anim.lean") 0 ;
setAttr ($name+"_r_pointer_anim.bend_1") 0 ;
setAttr ($name+"_r_pointer_anim.bend_2") 0 ;
setAttr ($name+"_r_pointer_anim.bend_3") 0 ;
setAttr ($name+"_r_pointer_anim.bend_4") 0 ;
setAttr ($name+"_r_pointer_anim.length") 1 ;
setAttr ($name+"_r_middle_anim.curl") 0 ;
setAttr ($name+"_r_middle_anim.scrunch") 0 ;
setAttr ($name+"_r_middle_anim.spread") 0 ;
setAttr ($name+"_r_middle_anim.twist") 0 ;
setAttr ($name+"_r_middle_anim.lean") 0 ;
setAttr ($name+"_r_middle_anim.bend_1") 0 ;
setAttr ($name+"_r_middle_anim.bend_2") 0 ;
setAttr ($name+"_r_middle_anim.bend_3") 0 ;
setAttr ($name+"_r_middle_anim.bend_4") 0 ;
setAttr ($name+"_r_middle_anim.length") 1 ;
setAttr ($name+"_r_ring_anim.curl") 0 ;
setAttr ($name+"_r_ring_anim.scrunch") 0 ;
setAttr ($name+"_r_ring_anim.spread") 0 ;
setAttr ($name+"_r_ring_anim.twist") 0 ;
setAttr ($name+"_r_ring_anim.lean") 0 ;
setAttr ($name+"_r_ring_anim.bend_1") 0 ;
setAttr ($name+"_r_ring_anim.bend_2") 0 ;
setAttr ($name+"_r_ring_anim.bend_3") 0 ;
setAttr ($name+"_r_ring_anim.bend_4") 0 ;
setAttr ($name+"_r_ring_anim.length") 1 ;
setAttr ($name+"_r_pinky_anim.curl") 0 ;
setAttr ($name+"_r_pinky_anim.scrunch") 0 ;
setAttr ($name+"_r_pinky_anim.spread") 0 ;
setAttr ($name+"_r_pinky_anim.twist") 0 ;
setAttr ($name+"_r_pinky_anim.lean") 0 ;
setAttr ($name+"_r_pinky_anim.bend_1") 0 ;
setAttr ($name+"_r_pinky_anim.bend_2") 0 ;
setAttr ($name+"_r_pinky_anim.bend_3") 0 ;
setAttr ($name+"_r_pinky_anim.bend_4") 0 ;
setAttr ($name+"_r_pinky_anim.length") 1 ;
break;
case 16:
setAttr ($name+"_hip_anim.translateX") 0 ;
setAttr ($name+"_hip_anim.translateY") 0 ;
setAttr ($name+"_hip_anim.translateZ") 0 ;
setAttr ($name+"_hip_anim.rotateX") 0 ;
setAttr ($name+"_hip_anim.rotateY") 0 ;
setAttr ($name+"_hip_anim.rotateZ") 0 ;
setAttr ($name+"_body_anim.translateX") 0 ;
setAttr ($name+"_body_anim.translateY") 0 ;
setAttr ($name+"_body_anim.translateZ") 0 ;
setAttr ($name+"_body_anim.rotateX") 0 ;
setAttr ($name+"_body_anim.rotateY") 0 ;
setAttr ($name+"_body_anim.rotateZ") 0 ;
setAttr ($name+"_back_torso_anim.rotateX") 0 ;
setAttr ($name+"_back_torso_anim.rotateY") -0 ;
setAttr ($name+"_back_torso_anim.rotateZ") 0 ;
setAttr ($name+"_front1_torso_anim.rotateX") 0 ;
setAttr ($name+"_front1_torso_anim.rotateY") -0 ;
setAttr ($name+"_front1_torso_anim.rotateZ") 0 ;
setAttr ($name+"_torso_anim.translateX") 0 ;
setAttr ($name+"_torso_anim.translateY") 0 ;
setAttr ($name+"_torso_anim.translateZ") 0 ;
setAttr ($name+"_torso_anim.rotateY") 0 ;
setAttr ($name+"_torso_anim.rotateZ") 0 ;
setAttr ($name+"_front2_torso_anim.rotateX") 0 ;
setAttr ($name+"_front2_torso_anim.rotateY") 0 ;
setAttr ($name+"_front2_torso_anim.rotateZ") 0 ;
setAttr ($name+"_shoulder_anim.translateX") 0 ;
setAttr ($name+"_shoulder_anim.translateY") 0 ;
setAttr ($name+"_shoulder_anim.translateZ") 0 ;
setAttr ($name+"_shoulder_anim.rotateX") 0 ;
setAttr ($name+"_shoulder_anim.rotateY") 0 ;
setAttr ($name+"_shoulder_anim.rotateZ") 0 ;
setAttr ($name+"_SpineSetting.fkCtrlVis") 0 ;

if ( catch( `setAttr ($name+"_front2_torso_anim.translateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_front2_torso_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_back_torso_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_front1_torso_anim.translateX") 0` ) )   print "";
if ( catch( `setAttr ($name+"_front2_torso_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_back_torso_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_front1_torso_anim.translateY") 0` ) )   print "";
if ( catch( `setAttr ($name+"_back_torso_anim.translateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_front1_torso_anim.translateZ") 0` ) )   print "";
if ( catch( `setAttr ($name+"_SpineSetting.fkCtrlVis") 1` ) )   print "";

break;
case 13:
setAttr ($name+"_neck1_ik_anim.translateX") 0 ;
setAttr ($name+"_neck1_ik_anim.translateY") 0 ;
setAttr ($name+"_neck1_ik_anim.translateZ") 0 ;
setAttr ($name+"_neck1_ik_anim.rotateX") 0 ;
setAttr ($name+"_neck1_ik_anim.rotateY") 0 ;
setAttr ($name+"_neck1_ik_anim.rotateZ") 0 ;
setAttr ($name+"_neck2_ik_anim.translateX") 0 ;
setAttr ($name+"_neck2_ik_anim.translateY") 0 ;
setAttr ($name+"_neck2_ik_anim.translateZ") 0 ;
setAttr ($name+"_neck2_ik_anim.rotateX") 0 ;
setAttr ($name+"_neck2_ik_anim.rotateY") 0 ;
setAttr ($name+"_neck2_ik_anim.rotateZ") 0 ;
setAttr ($name+"_head_ik_anim.translateX") 0 ;
setAttr ($name+"_head_ik_anim.translateY") 0 ;
setAttr ($name+"_head_ik_anim.translateZ") 0 ;
setAttr ($name+"_head_ik_anim.rotateX") 0 ;
setAttr ($name+"_head_ik_anim.rotateY") 0 ;
setAttr ($name+"_head_ik_anim.rotateZ") 0 ;
setAttr ($name+"_head_ik_anim.spineWorld") 0 ;
setAttr ($name+"_head_ik_anim.lockRotation") 0 ;
//setAttr ($name+"_NeckSetting.FkIk") 1;
    select -r ($name+"_neck_*_fk_anim");
       $object=`ls -sl`;
         for ($obj in $object)
            {
                setAttr ($obj+".rotateX") 0;
                setAttr ($obj+".rotateY") 0;
                setAttr ($obj+".rotateZ") 0;
            }
if (`objExists ($name+"_r_ear_base_anim")`)
    {
    select -r ($name+"_l_ear_*_anim") ($name+"_r_ear_*_anim");
       $object=`ls -sl`;
         for ($obj in $object)
            {
                setAttr ($obj+".rotateX") 0;
                setAttr ($obj+".rotateY") 0;
                setAttr ($obj+".rotateZ") 0;
            }
    }
break;
case 15:
setAttr ($name+"_tail1_ik_anim.translateX") 0 ;
setAttr ($name+"_tail1_ik_anim.translateY") 0 ;
setAttr ($name+"_tail1_ik_anim.translateZ") 0 ;
setAttr ($name+"_tail1_ik_anim.rotateX") 0 ;
setAttr ($name+"_tail1_ik_anim.rotateY") 0 ;
setAttr ($name+"_tail1_ik_anim.rotateZ") 0 ;
setAttr ($name+"_tail2_ik_anim.translateX") 0 ;
setAttr ($name+"_tail2_ik_anim.translateY") 0 ;
setAttr ($name+"_tail2_ik_anim.translateZ") 0 ;
setAttr ($name+"_tail2_ik_anim.rotateX") 0 ;
setAttr ($name+"_tail2_ik_anim.rotateY") 0 ;
setAttr ($name+"_tail2_ik_anim.rotateZ") 0 ;
setAttr ($name+"_end_ik_anim.translateX") 0 ;
setAttr ($name+"_end_ik_anim.translateY") 0 ;
setAttr ($name+"_end_ik_anim.translateZ") 0 ;
setAttr ($name+"_end_ik_anim.rotateX") 0 ;
setAttr ($name+"_end_ik_anim.rotateY") 0 ;
setAttr ($name+"_end_ik_anim.rotateZ") 0 ;
setAttr ($name+"_end_ik_anim.spineWorld") 0 ;
setAttr ($name+"_end_ik_anim.lockRotation") 0 ;
setAttr ($name+"_end_ik_anim.automaticTwist") 1 ;
setAttr ($name+"_end_ik_anim.twist") 0 ;
setAttr ($name+"_TailSetting.FkIk") 1;
select -r ($name+"_tail_*_fk_anim");
       $object=`ls -sl`;
         for ($obj in $object)
            {
                setAttr ($obj+".rotateX") 0;
                setAttr ($obj+".rotateY") 0;
                setAttr ($obj+".rotateZ") 0;
            }    
            
break;

}
select -cl;
select $ss;
}
}}


global proc wfSaveBiped(string $name)
{
$versionString=`about -v`;
if(int($versionString)<2019)
ExportAnimOptions; else ExportAnim;
//hideOptionBox;
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
autoKeyframe -state false;
 wfResetAll($name);
$currentFrame=` currentTime -q `;
//float $bufferA=`getAttr ($name+"_body_anim.translateY")`;
//float $bufferB=`getAttr ($name+"_shoulder_anim.translateX")`;
//setAttr ($name+"_body_anim.translateY") 0;
//setAttr ($name+"_shoulder_anim.translateX") 0;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_hip_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDis=`arclen $curveDis`; 
delete $curveDis;
$start =`xform -q -ws -piv ($name+"_hip_anim")`;
$end=`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDis=`arclen $curveDis`; 
delete $curveDis;

select -r ($name+"_anim_Set");
string $basicFilter="*.atom";
string $fDialog[]=`fileDialog2 -fileFilter $basicFilter -dialogStyle 2`;
if (size($fDialog)!=0) 
{
file -force -options "precision=8;statics=1;baked=1;sdk=0;constraint=0;animLayers=1;selected=selectedOnly;whichRange=1;range=0:20;hierarchy=none;controlPoints=0;useChannelBox=1;options=keys;copyKeyCmd=-animation objects -option keys -hierarchy none -controlPoints 0 " -typ "atomExport" -es $fDialog;
$adress=($fDialog[0]+"s");
$fileId=`fopen $adress "a"`;
fprint $fileId ("$spineDis="+$spineDis+";\n$legDis="+$legDis+";\n$oldName=\""+$name+"\";");
fclose $fileId;
}
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;
}


//wfLoadBiped("name"); $name="name";
global proc wfLoadBiped(string $name)
{
string $versionString;
$versionString=`about -v`;
if(int($versionString)<2019)
{
ImportAnimOptions; 
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
}
else ImportAnim;

//hideOptionBox;
autoKeyframe -state false;
wfResetAll($name);
$currentFrame=` currentTime -q `;
//float $bufferA=`getAttr ($name+"_body_anim.translateY")`;
//float $bufferB=`getAttr ($name+"_shoulder_anim.translateX")`;
//setAttr ($name+"_body_anim.translateY") 0;
//setAttr ($name+"_shoulder_anim.translateX") 0;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_hip_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDisNew=`arclen $curveDis`; 
delete $curveDis;
//float $spineDisNew=($start[1]-$end[1]);
$start=`xform -q -ws -piv ($name+"_hip_anim")`;
$end =`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDisNew=`arclen $curveDis`; 
delete $curveDis;

//float $legDisNew=($start[1]-$end[1]);
//setAttr ($name+"_body_anim.translateY") $bufferA;
//setAttr ($name+"_shoulder_anim.translateX") $bufferB;
string $basicFilter="*.atom";
string $fDialogLd=`fileDialog -dm "*.atom"`;
if (size($fDialogLd)!=0) 
{
$adress=($fDialogLd+"s");
$fileId=`fopen $adress "r"`;
string $nextLine = `fgetline $fileId`;
float $spineDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
float $legDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
string $oldName=evalEcho($nextLine);
string $ffff=";;targetTime=3;option=replace;match=string;;selected=selectedOnly;search="+$oldName+";replace="+$name+";prefix=;suffix=;mapFile=C:/;";
select -r ($name+"_anim_Set");
file -import -type "atomImport" -ra true  -options $ffff $fDialogLd;
select -cl;
float $scaleSpine=$spineDisNew/$spineDis;
float $scaleLeg=$legDisNew/$legDis;
float $scaleAll=($scaleSpine+$scaleLeg)/2;
selectKey -r -k ($name+"_l_foot_*_translate*") ($name+"_r_foot_*_translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0;
selectKey -r -k ($name+"_hip_anim_*translate*") ($name+"_body_anim_*translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleAll -vp 0 ;
selectKey -r -k ($name+"_all_anim_translate*");
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleAll -vp 0 ;

select -r ($name+"_anim_Set");
select -d ($name+"_l_foot_anim")  ($name+"_r_foot_anim") ($name+"_hip_anim") ($name+"_body_anim") ($name+"_all_anim") ;
string $objects[]=`ls -sl`;
for ($obj in $objects)
{
    if (`objExists ($obj +"_translate*Cycle*")`)
    {
        selectKey -r -k ($obj+"_translate*Cycle*");
        scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleSpine -vp 0 ;        
    }
}
selectKey -cl;
}//if (size($fDialogLd)!=0) 
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;


setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
}




 global proc BipedRunCycle(string $name,string $nameB)
{
    float $AngleArmMinus=`getAttr ($name+"_l_upArm_base_skin.rotateZ")`;
$AngleArmMinus=180-$AngleArmMinus;
$AngleArmMinus=$AngleArmMinus+($AngleArmMinus*0.3);

    string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $versionString;
$versionString=`about -v`;
if(int($versionString)<2019)
ImportAnimOptions; else ImportAnim;
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
autoKeyframe -state false;
 wfResetAll($name);
 $currentFrame=` currentTime -q `;
 playbackOptions -minTime 0 -maxTime 18;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_body_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDisNew=`arclen $curveDis`; 
delete $curveDis;
$start =`xform -q -ws -piv ($name+"_body_anim")`;
$end =`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDisNew=`arclen $curveDis`; 
delete $curveDis;
string $basicFilter="*.atom";
//string $fDialogLd="D:/Preseus/BipedRun2016.atom";
string $fDialogLd=($asSelectorScriptLocation+"/cycle/BipedRun2016.atom");
$adress=($fDialogLd+"s");
$fileId=`fopen $adress "r"`;
string $nextLine = `fgetline $fileId`;
float $spineDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
float $legDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
string $oldName=evalEcho($nextLine);
string $ffff=";;targetTime=3;option=replace;match=string;;selected=selectedOnly;search="+$oldName+";replace="+$name+";prefix=;suffix=;mapFile=C:/;";
select -r ($name+"_anim_Set");
file -import -type "atomImport" -ra true  -options $ffff $fDialogLd;
select -cl;
float $scaleSpine=$spineDisNew/$spineDis;
float $scaleLeg=$legDisNew/$legDis;
float $scaleAll=($scaleSpine+$scaleLeg)/2;
selectKey -r -k ($name+"_l_foot_*_translate*") ($name+"_r_foot_*_translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;
selectKey -r -k ($name+"_hip_anim_*translate*") ($name+"_body_anim_*translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleAll -vp 0 ;
select -r ($name+"_anim_Set");
select -d ($name+"_l_foot_anim")  ($name+"_r_foot_anim") ($name+"_hip_anim") ($name+"_body_anim") ($name+"_all_anim") ;
string $objects[]=`ls -sl`;
for ($obj in $objects)
{
    if (`objExists ($obj +"_translate*Cycle*")`)
    {
        selectKey -r -k ($obj+"_translate*Cycle*");
        scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleSpine -vp 0 ;        
    }
}
selectKey -cl;
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;
rename name_RunCycle ($name+"_RunCycle");
select -cl;
//////////
///////////////////
setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
/////
//////////
selectKey -add -k ($nameB+"_l_fk_upArm_anim_length_name_RunCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_l_fk_lowArm_anim_length_name_RunCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_r_fk_upArm_anim_length_name_RunCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;
selectKey -clear ;
selectKey -add -k ($nameB+"_r_fk_lowArm_anim_length_name_RunCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_l_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 0 -t 16 -t 23 ($nameB+"_l_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 11 ($nameB+"_l_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 5 ($nameB+"_l_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;


selectKey -clear ;
selectKey -add -k ($nameB+"_r_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 0 -t 5 -t 22.5 ($nameB+"_r_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 11.25 ($nameB+"_r_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) -t 16.25 ($nameB+"_r_fk_upArm_anim_rotate_name_RunCycle_inputBZ") ;

setAttr ($name+"_NeckSetting.FkIk") 1;
setAttr ($name+"_r_foot_anim.strech") 0;
setAttr ($name+"_l_foot_anim.strech") 0;
}

 
global proc BipedWalkCycle(string $name,string $nameB)
{
float $AngleArmMinus=`getAttr ($name+"_l_upArm_base_skin.rotateZ")`;
$AngleArmMinus=180-$AngleArmMinus;

string $asSelectorScriptLocation=`asSelectorScriptLocation`;
string $versionString;
$versionString=`about -v`;
if(int($versionString)<2019)
ImportAnimOptions; else ImportAnim;
if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;
saveOptionBoxSize();
autoKeyframe -state false;
wfResetAll($name);
 $currentFrame=` currentTime -q `;
 playbackOptions -minTime 0 -maxTime 24;
float $start[] =`xform -q -ws -piv ($name+"_shoulder_anim")`;
float $end[] =`xform -q -ws -piv ($name+"_body_anim")`;
string $curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $spineDisNew=`arclen $curveDis`; 
delete $curveDis;
$start =`xform -q -ws -piv ($name+"_body_anim")`;
$end =`xform -q -ws -piv ($name+"_all_anim")`;
$curveDis = `curve -d 1 
-p $start[0] $start[1] $start[2]
-p $end[0] $end[1] $end[2]
-k 0 -k 1`;
float $legDisNew=`arclen $curveDis`; 
delete $curveDis;
string $basicFilter="*.atom";
//string $fDialogLd="D:/Preseus/BipedWalk2016.atom";
string $fDialogLd=($asSelectorScriptLocation+"/cycle/BipedWalk2016.atom");
$adress=($fDialogLd+"s");
$fileId=`fopen $adress "r"`;
string $nextLine = `fgetline $fileId`;
float $spineDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
float $legDis=evalEcho($nextLine);
$nextLine = `fgetline $fileId`;
string $oldName=evalEcho($nextLine);
string $ffff=";;targetTime=3;option=replace;match=string;;selected=selectedOnly;search="+$oldName+";replace="+$name+";prefix=;suffix=;mapFile=C:/;";
select -r ($name+"_anim_Set");
file -import -type "atomImport" -ra true  -namespace "BipedWalk2016" -options $ffff $fDialogLd;
//file -import -type "atomImport" -ra true -namespace "BipedWalk2016" -options ";;targetTime=3;option=insert;match=string;;selected=selectedOnly;search=name;replace=tehran;prefix=;suffix=;mapFile=C:/Users/Mohammad/Documents/maya/projects/default/data/;" "D:/Preseus/BipedWalk2016.atom";

select -cl;
float $scaleSpine=$spineDisNew/$spineDis;
float $scaleLeg=$legDisNew/$legDis;
float $scaleAll=($scaleSpine+$scaleLeg)/2;
selectKey -r -k ($name+"_l_foot_*_translate*") ($name+"_r_foot_*_translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleLeg -vp 0 ;
selectKey -r -k ($name+"_hip_anim_*translate*") ($name+"_body_anim_*translate*") ;
scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleAll -vp 0 ;
select -r ($name+"_anim_Set");
select -d ($name+"_l_foot_anim")  ($name+"_r_foot_anim") ($name+"_hip_anim") ($name+"_body_anim") ($name+"_all_anim") ;
string $objects[]=`ls -sl`;
for ($obj in $objects)
{
    if (`objExists ($obj +"_translate*Cycle*")`)
    {
        selectKey -r -k ($obj+"_translate*Cycle*");
        scaleKey -iub false -ts 0 -tp 0 -fs 0 -fp 0 -vs $scaleSpine -vp 0 ;        
    }
}
selectKey -cl;
select -cl;
playButtonEnd;
playButtonStart;
currentTime $currentFrame;
////
/////
///////
rename name_WalkCycle ($name+"_WalkCycle");
select -cl;
//select -r ($name+"_l_fk_upArm_anim") ;
//select -tgl ($name+"_l_fk_lowArm_anim") ;
//select -tgl ($name+"_r_fk_lowArm_anim") ;
//select -tgl ($name+"_r_fk_upArm_anim") ;
//select -tgl ($name+"_l_foot_anim") ;
//select -tgl ($name+"_r_foot_anim") ;
//selectKey -clear ;
//selectKey -add -k -t 0 -t 24 ($name+"_l_fk_lowArm_anim_length_name_WalkCycle_inputB") ;
//selectKey -add -k -t 0 -t 24 ($name+"_l_fk_upArm_anim_length_name_WalkCycle_inputB") ;
//catch(`selectKey -add -k -f 0 ($name+"_l_noFlip_lowLeg_joint_translateX")`) ;
//catch(`selectKey -add -k -f 0 ($name+"_l_noFlip_foot_joint_translateX")`) ;
//catch(`selectKey -add -k -f 0 ($name+"_r_noFlip_lowLeg_joint_translateX")`) ;
//catch(`selectKey -add -k -f 0 ($name+"_r_noFlip_foot_joint_translateX") `) ;
//selectKey -add -k ($name+"_r_fk_upArm_anim_length_name_WalkCycle_inputB") ($name+"_r_fk_lowArm_anim_length_name_WalkCycle_inputB") ($name+"_l_foot_anim_roll_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeLift_name_WalkCycle_inputB") ($name+"_l_foot_anim_lean_name_WalkCycle_inputB") ($name+"_l_foot_anim_side_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeSpin_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeWiggle_name_WalkCycle_inputB") ($name+"_l_foot_anim_kneeSpin_name_WalkCycle_inputB") ($name+"_l_foot_anim_upLegLength_name_WalkCycle_inputB") ($name+"_l_foot_anim_lowLegLength_name_WalkCycle_inputB") ($name+"_r_foot_anim_roll_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeLift_name_WalkCycle_inputB") ($name+"_r_foot_anim_lean_name_WalkCycle_inputB") ($name+"_r_foot_anim_side_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeSpin_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeWiggle_name_WalkCycle_inputB") ($name+"_r_foot_anim_kneeSpin_name_WalkCycle_inputB") ($name+"_r_foot_anim_upLegLength_name_WalkCycle_inputB") ($name+"_r_foot_anim_lowLegLength_name_WalkCycle_inputB") ;
//selectKey -add -k ($name+"_l_foot_anim_roll_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeLift_name_WalkCycle_inputB") ($name+"_l_foot_anim_lean_name_WalkCycle_inputB") ($name+"_l_foot_anim_side_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeSpin_name_WalkCycle_inputB") ($name+"_l_foot_anim_toeWiggle_name_WalkCycle_inputB") ($name+"_l_foot_anim_kneeSpin_name_WalkCycle_inputB") ($name+"_l_foot_anim_upLegLength_name_WalkCycle_inputB") ($name+"_l_foot_anim_lowLegLength_name_WalkCycle_inputB") ($name+"_r_foot_anim_roll_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeLift_name_WalkCycle_inputB") ($name+"_r_foot_anim_lean_name_WalkCycle_inputB") ($name+"_r_foot_anim_side_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeSpin_name_WalkCycle_inputB") ($name+"_r_foot_anim_toeWiggle_name_WalkCycle_inputB") ($name+"_r_foot_anim_kneeSpin_name_WalkCycle_inputB") ($name+"_r_foot_anim_upLegLength_name_WalkCycle_inputB") ($name+"_r_foot_anim_lowLegLength_name_WalkCycle_inputB") ;
//catch(`selectKey -rm -k -f 0 ($name+"_l_noFlip_lowLeg_joint_translateX") `) ;
//catch(`selectKey -rm -k -f 0 ($name+"_l_noFlip_foot_joint_translateX") `) ;
//catch(`selectKey -rm -k -f 0 ($name+"_r_noFlip_lowLeg_joint_translateX") `) ;
//catch(`selectKey -rm -k -f 0 ($name+"_r_noFlip_foot_joint_translateX") `) ;
//cutKey -animation keys -clear;
//selectKey -clear ;
select -cl;

setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
////////////
///////////
selectKey -add -k ($nameB+"_l_fk_upArm_anim_length_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_l_fk_lowArm_anim_length_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -add -k ($nameB+"_l_foot_anim_upLegLength_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_l_foot_anim_lowLegLength_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 1 ;


selectKey -clear ;
selectKey -add -k -t 0 -t 24 ($nameB+"_l_thumb_anim_spread_name_WalkCycle_inputB") ;
selectKey -add -k -t 0 -t 24 ($nameB+"_l_thumb_anim_orbit_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 0 ;

selectKey -clear ;
selectKey -add -k -t 0 -t 24 ($nameB+"_r_thumb_anim_spread_name_WalkCycle_inputB") ;
selectKey -add -k -t 0 -t 24 ($nameB+"_r_thumb_anim_orbit_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 0 ;


selectKey -clear ;
selectKey -add -k ($nameB+"_r_fingers_anim_thumbSpread_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 0 ;

selectKey -clear ;
selectKey -add -k -t 0 -t 30 ($nameB+"_l_thumb_anim_spread_name_WalkCycle_inputB") ;
selectKey -add -k -t 0 -t 30 ($nameB+"_l_thumb_anim_orbit_name_WalkCycle_inputB") ;
keyframe -animation keys -absolute -valueChange 0 ;

selectKey -clear ;
selectKey -add -k ($nameB+"_l_fk_upArm_anim_rotate_name_WalkCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc ($AngleArmMinus) ($nameB+"_l_fk_upArm_anim_rotate_name_WalkCycle_inputBZ") ;


selectKey -clear ;
selectKey -add -k ($nameB+"_r_fk_upArm_anim_rotate_name_WalkCycle_inputBZ") ;
keyframe -e -iub true -r -o over -vc $AngleArmMinus ($nameB+"_r_fk_upArm_anim_rotate_name_WalkCycle_inputBZ") ;

setAttr ($name+"_NeckSetting.FkIk") 1;

}


//BipedWalkFootStepA("name"); $name="name";
global proc BipedWalkFootStepA(string $name,string $nameB)
{
  //source js_quickAddAttrGo;
float $FootStepPercent = 1;
//float $FootStepPercent = 1;

string $object[]=`ls -sl`;
if(size($object)==1)
    {
        cycleCheck -e off;
        currentTime    (`playbackOptions -q -minTime`);
        $object[0]=`rename $object[0] ($name+"_walkCurve")`;
        select -r ($name+"_all_anim");
        js_quickAddAttrGo "txBase tyBase tzBase rxBase ryBase rzBase";
        setAttr -keyable false -channelBox false ($name+"_all_anim.txBase") (`getAttr  ($name+"_all_anim.translateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tyBase") (`getAttr  ($name+"_all_anim.translateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tzBase") (`getAttr  ($name+"_all_anim.translateZ")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rxBase") (`getAttr  ($name+"_all_anim.rotateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.ryBase") (`getAttr  ($name+"_all_anim.rotateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rzBase") (`getAttr  ($name+"_all_anim.rotateZ")`);
        
        

        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add $object[0] ;

        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $thirdFoot="";
        string $fourthFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        $obj_3_tfront=`getAttr ($object[4]+".translate"+$frontAxis)`;
        $obj_4_tfront=`getAttr ($object[5]+".translate"+$frontAxis)`;
        if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
        
print $firstFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*1*$FootStepPercent;
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=0;$i<4;$i++)
        $second_foot_keyframe[($i)]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=3;$i<6;$i++)
        $first_foot_keyframe[($i-3)]=$first_foot_keyframe_index[$i];    
        
        select -cl  ;
        
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        channelBoxCommand -break;
        CBdeleteConnection ($all_anim+".r"+$sideAxis);
        setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($nameB+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

        group -em -n "step_locator_grp";
        $i=1;
      currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe_index[0]);
       curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
       scale -r ($footStep*0.15) ($footStep*0.15) ($footStep*0.15) ;
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe_index[3]);
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.15) ($footStep*0.15) ($footStep*0.15) ;
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) step_locator_grp;
        
        for($i=2;$i<=($loopCount+1);$i++)
        {
        currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe_index[0]);
        curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.15) ($footStep*0.15) ($footStep*0.15) ;       
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////print $loopFrame;print $fourth_foot_keyframe_index[8];
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe_index[3]);        
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.15) ($footStep*0.15) ($footStep*0.15) ;  
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) step_locator_grp;
        }
                currentTime($firstFrame);
        delete ($name+"_walkPath");
        setAttr ($name+"_all_anim.translateX") (`getAttr  ($name+"_all_anim.txBase")`);
        setAttr ($name+"_all_anim.translateY") (`getAttr  ($name+"_all_anim.tyBase")`);
        setAttr ($name+"_all_anim.translateZ") (`getAttr  ($name+"_all_anim.tzBase")`);
        setAttr ($name+"_all_anim.rotateX") (`getAttr  ($name+"_all_anim.rxBase")`);
        setAttr ($name+"_all_anim.rotateY") (`getAttr  ($name+"_all_anim.ryBase")`);
        setAttr ($name+"_all_anim.rotateZ") (`getAttr  ($name+"_all_anim.rzBase")`);
        select -r $object[3] ;
    }
    cycleCheck -e on;
}// CreateFootStep  CreateFootStep  CreateFootStep
//BipedWalkFootStepA("name"); $name="name";
global proc js_quickAddAttr ( string $attr )
{

    if ($attr == "")
    {
        js_createAddAttrWin;
    }
    else
    {
        js_quickAddAttrGo $attr;
    }
}

global proc js_createAddAttrWin ()
{
    $win = "js_quickAddAttr";
    if (`window -exists $win`)
        deleteUI $win;

    window -t "Quick-Add Attribute" -w 200 -h 40 $win;
    columnLayout -adj true -co "both" 10 ;
    text -align "left" -l "Please Enter New Attribute:";
    $t = `textField`;
    textField -e -cc ("js_quickAddAttrPrep " + $t) $t;

    showWindow $win;
}

global proc js_quickAddAttrPrep (string $t)
{
    string $attr = `textField -q -tx $t`;
    $cmd = ("js_quickAddAttrGo \"" + $attr + "\"");
    evalEcho $cmd;
    textField -e -tx "" -ip 1 $t;
    evalDeferred ("setFocus \""+$t+"\"");
}
global proc js_quickAddAttrGo (string $attr)
{
    // grab the selected objects
    string $objs[0];
    $objs = `ls -sl`;
    string $attrs[0];
    // now tokenize by spaces
    tokenize ($attr, $attrs);

   
    for ($ob in $objs)
    {
        // split the attr into individual attributes
        for ($at in $attrs)
        {
            if (!`attributeQuery -exists -node $ob $at`)
            {
                addAttr -ln $at -at double $ob;
            }
            if (!`getAttr -k ($ob + "." + $at)`)
            {
                setAttr -k 1 ($ob + "." + $at);
            }
        }
    }
}


//BipedRunFootStepA("name"); $name="name";
global proc BipedRunFootStepA(string $name,string $nameB)
{
  //source js_quickAddAttrGo;
        float $FootStepPercent = 1;
string $object[]=`ls -sl`;
if(size($object)==1)
    {
        cycleCheck -e off;
        currentTime    (`playbackOptions -q -minTime`);
        $object[0]=`rename $object[0] ($name+"_walkCurve")`;
        select -r ($name+"_all_anim");
        js_quickAddAttrGo "txBase tyBase tzBase rxBase ryBase rzBase";
        setAttr -keyable false -channelBox false ($name+"_all_anim.txBase") (`getAttr  ($name+"_all_anim.translateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tyBase") (`getAttr  ($name+"_all_anim.translateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.tzBase") (`getAttr  ($name+"_all_anim.translateZ")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rxBase") (`getAttr  ($name+"_all_anim.rotateX")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.ryBase") (`getAttr  ($name+"_all_anim.rotateY")`);
        setAttr -keyable false -channelBox false ($name+"_all_anim.rzBase") (`getAttr  ($name+"_all_anim.rotateZ")`);
        
        

        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add $object[0] ;

        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $thirdFoot="";
        string $fourthFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        $obj_3_tfront=`getAttr ($object[4]+".translate"+$frontAxis)`;
        $obj_4_tfront=`getAttr ($object[5]+".translate"+$frontAxis)`;
        if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
        
print $firstFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        currentTime    ((`playbackOptions -q -minTime`)+4);
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*1.5*$FootStepPercent;
        currentTime    (`playbackOptions -q -minTime`);
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=2;$i<4;$i++)
        $second_foot_keyframe[($i-2)]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=6;$i<8;$i++)
        $first_foot_keyframe[($i-6)]=$first_foot_keyframe_index[$i];    
        
        select -cl  ;
        
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        channelBoxCommand -break;
        CBdeleteConnection ($all_anim+".r"+$sideAxis);
        setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($nameB+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

        group -em -n "step_locator_grp";
        $i=1;
      currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe_index[2]);
        curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.07) ($footStep*0.07) ($footStep*0.07) ; 
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe_index[6]);
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.07) ($footStep*0.07) ($footStep*0.07) ; 
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) step_locator_grp;
        
        for($i=2;$i<=($loopCount+1);$i++)
        {
        currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe_index[2]);
        curve -n ("locator_second_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.07) ($footStep*0.07) ($footStep*0.07) ;  
        //spaceLocator -n ("locator_second_"+$i)   ;
        setAttr ("locator_second_"+$i+".overrideEnabled") 1;
        setAttr ("locator_second_"+$i+".overrideColor") 5;
        $pConst=`parentConstraint  $secondFoot ("locator_second_"+$i)`;
        delete $pConst;
        //////////print $loopFrame;print $fourth_foot_keyframe_index[8];
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe_index[6]);
        curve -n ("locator_first_"+$i) -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 2 -p 1 0 2 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;
        scale -r ($footStep*0.07) ($footStep*0.07) ($footStep*0.07) ;  
        //spaceLocator -n ("locator_first_"+$i)   ;
        setAttr ("locator_first_"+$i+".overrideEnabled") 1;
        setAttr ("locator_first_"+$i+".overrideColor") 7;
        $pConst=`parentConstraint  $firstFoot ("locator_first_"+$i)`;
        delete $pConst;
        
        parent ("locator_second_"+$i) ("locator_first_"+$i) step_locator_grp;
        }
                currentTime($firstFrame);
        delete ($name+"_walkPath");
        setAttr ($name+"_all_anim.translateX") (`getAttr  ($name+"_all_anim.txBase")`);
        setAttr ($name+"_all_anim.translateY") (`getAttr  ($name+"_all_anim.tyBase")`);
        setAttr ($name+"_all_anim.translateZ") (`getAttr  ($name+"_all_anim.tzBase")`);
        setAttr ($name+"_all_anim.rotateX") (`getAttr  ($name+"_all_anim.rxBase")`);
        setAttr ($name+"_all_anim.rotateY") (`getAttr  ($name+"_all_anim.ryBase")`);
        setAttr ($name+"_all_anim.rotateZ") (`getAttr  ($name+"_all_anim.rzBase")`);
        select -r $object[3] ;
    }
    cycleCheck -e on;
}// CreateFootStep  CreateFootStep  CreateFootStep
//BipedRunFootStepA("name"); $name="name";
global proc js_quickAddAttr ( string $attr )
{

    if ($attr == "")
    {
        js_createAddAttrWin;
    }
    else
    {
        js_quickAddAttrGo $attr;
    }
}

global proc js_createAddAttrWin ()
{
    $win = "js_quickAddAttr";
    if (`window -exists $win`)
        deleteUI $win;

    window -t "Quick-Add Attribute" -w 200 -h 40 $win;
    columnLayout -adj true -co "both" 10 ;
    text -align "left" -l "Please Enter New Attribute:";
    $t = `textField`;
    textField -e -cc ("js_quickAddAttrPrep " + $t) $t;

    showWindow $win;
}

global proc js_quickAddAttrPrep (string $t)
{
    string $attr = `textField -q -tx $t`;
    $cmd = ("js_quickAddAttrGo \"" + $attr + "\"");
    evalEcho $cmd;
    textField -e -tx "" -ip 1 $t;
    evalDeferred ("setFocus \""+$t+"\"");
}


// BipedWalkFootStepB("name");
global proc BipedWalkFootStepB(string $name,string $nameB)
{
if (`objExists locator_second_1`)
    {
        float $FootStepPercent = 1;
        //float $FootStepPercent = 1;
        currentTime    (`playbackOptions -q -minTime`);
        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add ($name+"_walkCurve") ;
        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
print $firstFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*1*$FootStepPercent;
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=0;$i<4;$i++)
        $second_foot_keyframe[($i)]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=3;$i<6;$i++)
        $first_foot_keyframe[($i-3)]=$first_foot_keyframe_index[$i];    
        
        select -cl  ;
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        channelBoxCommand -break;
        CBdeleteConnection ($all_anim+".r"+$sideAxis);
        setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($nameB+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

select -cl  ;
select -r $secondFoot ;
select -add $firstFoot ;
//select -add $all_anim;
animLayer  ($name+"_CycleOnPath");
setAttr ($name+"_CycleOnPath.rotationAccumulationMode") 0;
setAttr ($name+"_CycleOnPath.scaleAccumulationMode") 1;
animLayer -e -addSelectedObjects($name+"_CycleOnPath");
animLayerEditorOnSelect "BaseAnimation" 0;
animLayerEditorOnSelect ($name+"_WalkCycle") 0;
animLayerEditorOnSelect ($name+"_CycleOnPath") 1;
//print $second_foot_keyframe[0];
//print $first_foot_keyframe[0];

for($i=1;$i<=$loopCount;$i++)
{
    float $r_l_loc[] = `xform -q -ws -piv ("locator_second_"+$i)`;
    float $r_l_rotate_loc[] = `xform -q -ws -ro ("locator_second_"+$i)`;
    float $r_r_loc[] = `xform -q -ws -piv ("locator_first_"+$i)`;
    float $r_r_rotate_loc[] = `xform -q -ws -ro ("locator_first_"+$i)`;
///////////////
    for($j=0;$j<size($second_foot_keyframe);$j++)
    {
      currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe[$j]);
        move -rpr $r_l_loc[0] $r_l_loc[1] $r_l_loc[2] $secondFoot;
        xform  -ws -ro ($r_l_rotate_loc[0]) ($r_l_rotate_loc[1]) ($r_l_rotate_loc[2]) $secondFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$secondFoot};            
    }    
        for($j=0;$j<size($first_foot_keyframe);$j++)
    {
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe[$j]);
        move -rpr $r_r_loc[0] $r_r_loc[1] $r_r_loc[2] $firstFoot;
        xform  -ws -ro ($r_r_rotate_loc[0]) ($r_r_rotate_loc[1]) ($r_r_rotate_loc[2]) $firstFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$firstFoot};  
    }
    ////////////////////////////////////////////
}


///////
currentTime($firstFrame);
//////////
string $secondFoot_attr[]=`listAttr -k $secondFoot`;
string $firstFoot_attr[]=`listAttr -k $secondFoot`;
select -cl  ;
select -cl  ;
select -r $secondFoot ;
selectKey -clear ;
/////////////
		for ($sel in $secondFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($secondFoot+"_rotate_"+$nameB+"_CycleOnPath_inputB"+$sel2); 
		        //selectKey -add -k ($fourthFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);         
		        }
		        	else
		        if($sel=="tag")
		        {}else
		        {
        selectKey -add -k ($secondFoot+"_"+$sel+"_"+$nameB+"_CycleOnPath_inputB")  ;
       // selectKey -add -k ($fourthFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }

}
		        keyTangent -itt linear -ott linear; 



select -cl  ;
select -r $firstFoot ;
selectKey -clear ;
		for ($sel in $firstFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($firstFoot+"_rotate_"+$nameB+"_CycleOnPath_inputB"+$sel2);   
		        //selectKey -add -k ($thirdFoot +"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);      
		        }
		        else
		        if($sel=="tag")
		        {}else
		        {
        selectKey -add -k ($firstFoot+"_"+$sel+"_"+$nameB+"_CycleOnPath_inputB")  ;
        //selectKey -add -k ($thirdFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }
    }
		        keyTangent -itt linear -ott linear; 
		        select -cl  ;		       
delete step_locator_grp;
currentTime($firstFrame);
    }
setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;    
    }
//}// CreateFootStep  CreateFootStep  CreateFootStep
//QuadrupedRunFootStep("name");


// BipedRunFootStepB("name");
global proc BipedRunFootStepB(string $name,string $nameB)
{
if (`objExists locator_second_1`)
    {
        float $FootStepPercent = 1;
    currentTime    (`playbackOptions -q -minTime`);
        select -cl  ;
        select -r ($name+"_l_foot_anim") ;
        select -add ($name+"_r_foot_anim") ;
        select -add ($name+"_all_anim") ;
        select -add ($name+"_walkCurve") ;
        string $object[]=`ls -sl`;        
        $upAxis ="Y";
        $frontAxis ="Z";
        $sideAxis="x";
        
        string $firstFoot="";
        string $secondFoot="";
        string $all_anim=$object[2];
        string $curvePath=$object[3];
        $obj_1_tfront=`getAttr ($object[0]+".translate"+$frontAxis)`;
        $obj_2_tfront=`getAttr ($object[1]+".translate"+$frontAxis)`;
        if ($obj_1_tfront<$obj_2_tfront)
        {
        $firstFoot=$object[0];
        $secondFoot=$object[1];
        } else
        {
        $firstFoot=$object[1];
        $secondFoot=$object[0];
        }
print $firstFoot;
        ///////////////////////////////////////
        ///////////////////////////////////////
        int $firstFrame =`findKeyframe -which first $firstFoot`;
        int $lastFrame =`findKeyframe -which last $firstFoot`;
        int $middleFrame = trunc(($firstFrame+$lastFrame)/2);
        int $loopFrame=$lastFrame-$firstFrame;
        currentTime    ((`playbackOptions -q -minTime`)+4);
        float $first_foot_a[] = `xform -q -ws -piv $firstFoot`;
        float $second_foot_a[] = `xform -q -ws -piv $secondFoot`;
        float $second_foot_a_z = `abs $second_foot_a[5]`;
        float $first_foot_a_z = `abs $first_foot_a[5]`;
        float $footStep = ($second_foot_a_z+$first_foot_a_z)*1.5*$FootStepPercent;
        currentTime    (`playbackOptions -q -minTime`);
        float $PathLength = `arclen $curvePath`;
        int $loopCount=$PathLength/($footStep*2);
        int $max_frame=$loopCount*$loopFrame;
        playbackOptions -minTime ($firstFrame) -maxTime ($firstFrame+$loopCount*$loopFrame);
        
        string $second_foot_convert[];
        float $second_foot_keyframe[];
        float $second_foot_keyframe_index[];
        select -r ($secondFoot);
        float $second_foot_keyframe_base[]=`keyframe  -query `;
        for($i=0;$i<size($second_foot_keyframe_base);$i++)
        $second_foot_convert[$i]=$second_foot_keyframe_base[$i];
        $second_foot_convert=`stringArrayRemoveDuplicates($second_foot_convert)`;
        for($i=0;$i<size($second_foot_convert);$i++)
        $second_foot_keyframe_index[$i]=$second_foot_convert[$i];
        for($i=2;$i<4;$i++)
        $second_foot_keyframe[($i-2)]=$second_foot_keyframe_index[$i];
        //print ($second_foot_keyframe);
        
        string $first_foot_convert[];
        float $first_foot_keyframe[];
        float $first_foot_keyframe_index[];
        float $first_foot1_keyframe[];
        select -r ($firstFoot);
        float $first_foot_keyframe_base[]=`keyframe  -query`;
        for($i=0;$i<size($first_foot_keyframe_base);$i++)
        $first_foot_convert[$i]=$first_foot_keyframe_base[$i];
        $first_foot_convert=`stringArrayRemoveDuplicates($first_foot_convert)`;
        for($i=0;$i<size($first_foot_convert);$i++)
        $first_foot_keyframe_index[$i]=$first_foot_convert[$i];
        for($i=6;$i<8;$i++)
        $first_foot_keyframe[($i-6)]=$first_foot_keyframe_index[$i];    
        
        select -cl  ;
        select -r $all_anim ;
        select -tgl $curvePath ;
        if($upAxis=="Y")
        {
        pathAnimation -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="X")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 1 0 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }else
        if($upAxis=="Z")
        {
        pathAnimation  -n ($name+"_walkPath") -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 0 1 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
        }
        channelBoxCommand -break;
        CBdeleteConnection ($all_anim+".r"+$sideAxis);
        setAttr ($all_anim+".r"+$sideAxis) 0;
        
        
        // Result: motionPath1 //
        select -cl  ;
        select -r $all_anim ;
        selectKey -clear ;
        selectKey -add -k -t ($firstFrame) -t ($firstFrame+$loopCount*$loopFrame) ($nameB+"_walkPath_uValue");
        //selectKey -add -k ($name+"_walkPath_uValue");

        keyTangent -itt linear -ott linear;

select -cl  ;
select -r $secondFoot ;
select -add $firstFoot ;
//select -add $all_anim;
animLayer  ($name+"_CycleOnPath");
setAttr ($name+"_CycleOnPath.rotationAccumulationMode") 0;
setAttr ($name+"_CycleOnPath.scaleAccumulationMode") 1;
animLayer -e -addSelectedObjects($name+"_CycleOnPath");
animLayerEditorOnSelect "BaseAnimation" 0;
animLayerEditorOnSelect ($name+"_RunCycle") 0;
animLayerEditorOnSelect ($name+"_CycleOnPath") 1;
//print $second_foot_keyframe[0];
//print $first_foot_keyframe[0];

for($i=1;$i<=$loopCount;$i++)
{
    float $r_l_loc[] = `xform -q -ws -piv ("locator_second_"+$i)`;
    float $r_l_rotate_loc[] = `xform -q -ws -ro ("locator_second_"+$i)`;
    float $r_r_loc[] = `xform -q -ws -piv ("locator_first_"+$i)`;
    float $r_r_rotate_loc[] = `xform -q -ws -ro ("locator_first_"+$i)`;
///////////////
    for($j=0;$j<size($second_foot_keyframe);$j++)
    {
      currentTime ($firstFrame+$loopFrame*($i-1)+$second_foot_keyframe[$j]);
        move -rpr $r_l_loc[0] $r_l_loc[1] $r_l_loc[2] $secondFoot;
        xform  -ws -ro ($r_l_rotate_loc[0]) ($r_l_rotate_loc[1]) ($r_l_rotate_loc[2]) $secondFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$secondFoot};            
    }    
        for($j=0;$j<size($first_foot_keyframe);$j++)
    {
        currentTime ($firstFrame+$loopFrame*($i-1)+$first_foot_keyframe[$j]);
        move -rpr $r_r_loc[0] $r_r_loc[1] $r_r_loc[2] $firstFoot;
        xform  -ws -ro ($r_r_rotate_loc[0]) ($r_r_rotate_loc[1]) ($r_r_rotate_loc[2]) $firstFoot;
        setKeyframe -breakdown 0 -hierarchy none -controlPoints 0 -shape 0 {$firstFoot};  
    }
    ////////////////////////////////////////////
}


///////
currentTime($firstFrame);
//////////
string $secondFoot_attr[]=`listAttr -k $secondFoot`;
string $firstFoot_attr[]=`listAttr -k $secondFoot`;
select -cl  ;
select -cl  ;
select -r $secondFoot ;
selectKey -clear ;
/////////////
		for ($sel in $secondFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($secondFoot+"_rotate_"+$nameB+"_CycleOnPath_inputB"+$sel2); 
		        //selectKey -add -k ($fourthFoot+"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);         
		        }
		        	else
		        if($sel=="tag")
		        {}else
		        {
		if($nameB==$name)
		{
		    selectKey -add -k ($secondFoot+"_"+$sel+"_"+$nameB+"_CycleOnPath_inputB")  ;
		    }else
		    selectKey -add -k ($secondFoot+"_"+$sel+"_name_CycleOnPath_inputB")  ;
       // selectKey -add -k ($fourthFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }

}
		        keyTangent -itt linear -ott linear; 



select -cl  ;
select -r $firstFoot ;
selectKey -clear ;
		for ($sel in $firstFoot_attr)
		{
		    if($sel=="rotateX" ||$sel=="rotateY"||$sel=="rotateZ")
		    {
		        $sel2=`substring $sel 7 8`;
		        selectKey -add -k ($firstFoot+"_rotate_"+$nameB+"_CycleOnPath_inputB"+$sel2);   
		        //selectKey -add -k ($thirdFoot +"_rotate_"+$name+"_CycleOnPath_inputB"+$sel2);      
		        }
		        else
		        if($sel=="tag")
		        {}else
		        {
        selectKey -add -k ($firstFoot+"_"+$sel+"_"+$nameB+"_CycleOnPath_inputB")  ;
        //selectKey -add -k ($thirdFoot+"_"+$sel+"_"+$name+"_CycleOnPath_inputB")  ;
        }
    }
		        keyTangent -itt linear -ott linear; 
		        select -cl  ;		       
delete step_locator_grp;
currentTime($firstFrame);
    }
setAttr ($name+"_r_fk_lowArm_anim.length") 1;
setAttr ($name+"_l_fk_upArm_anim.length") 1;
setAttr ($name+"_l_fk_lowArm_anim.length") 1;
setAttr ($name+"_r_fk_upArm_anim.length") 1;

setAttr ($name+"_r_foot_anim.lowLegLength") 1;
setAttr ($name+"_r_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.upLegLength") 1;
setAttr ($name+"_l_foot_anim.lowLegLength") 1;


setAttr ($name+"_l_thumb_anim.length") 1;
setAttr ($name+"_l_middle_anim.length") 1;
setAttr ($name+"_l_ring_anim.length") 1;
setAttr ($name+"_l_pinky_anim.length") 1;
setAttr ($name+"_l_pointer_anim.length") 1;
setAttr ($name+"_r_thumb_anim.length") 1;
setAttr ($name+"_r_middle_anim.length") 1;
setAttr ($name+"_r_ring_anim.length") 1;
setAttr ($name+"_r_pinky_anim.length") 1;
setAttr ($name+"_r_pointer_anim.length") 1;
    }
//}// CreateFootStep  CreateFootStep  CreateFootStep
//QuadrupedRunFootStep("name");

global proc string CreateCorrectiveShapes (string $name)
{
string $angAxis;
string $jointModel[]=`ls -sl`;
string $cBlend=$jointModel[0];
float $cTime=`currentTime -q` ;
select -r $jointModel[1];
string $models[]=`ls -sl`;
string $dupModel[];
textField -e  -text $cBlend nameBox1 ;
textField -e  -text ($jointModel[1]) nameBox2 ;
string $findHlprJntEx="";
float $xAng;
float $yAng;
float $zAng;

int $faceOrBody= `getAttr ($cBlend+".type")`;
if($faceOrBody>0)
{

        $checkValue=`attributeQuery -node $cBlend -ex "angleY"`;
        $findHlprJntEx=`match "_hlper_" $cBlend`;
        if($checkValue==0)
        {
        select -r $cBlend;
        if(size($findHlprJntEx)==0) 
        addAngleAttr($name);else
        addAngleAttrB($name);
        }
        
        select -r $jointModel[1];
        $yAng=`getAttr($cBlend+".angleY")`;
        $zAng=`getAttr($cBlend+".angleZ")`;
        if(abs($yAng)<abs($zAng))
        { 
            $angAxis="z";
            duplicate -rr -n ($models[0]+"_angZ_"+$zAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool; 
        }else if(abs($yAng)>abs($zAng))
        {
            $angAxis="y";
            duplicate -rr -n ($models[0]+"_angY_"+$yAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool;   
        }
} 
if($faceOrBody==0)
{
            select -r $jointModel[1];
        $xAng=`getAttr($cBlend+".translateX")`;
        $yAng=`getAttr($cBlend+".translateY")`;
        $zAng=`getAttr($cBlend+".translateZ")`;
        if(abs($yAng)<abs($zAng)&&abs($xAng)<abs($zAng))
        { 
            $angAxis="tz";
            duplicate -rr -n ($models[0]+"_angZ_"+$zAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool; 
        }else if(abs($yAng)>abs($zAng)&&abs($yAng)>abs($xAng))
        {
            $angAxis="ty";
            duplicate -rr -n ($models[0]+"_angY_"+$yAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool;   
        }else if(abs($xAng)>abs($zAng)&&abs($xAng)>abs($yAng))
        {
            $angAxis="tx";
            duplicate -rr -n ($models[0]+"_angX_"+$yAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool;   
        }
        /////////////
        /////////////////////
        $xAng=`getAttr($cBlend+".rotateX")`;
        $yAng=`getAttr($cBlend+".rotateY")`;
        $zAng=`getAttr($cBlend+".rotateZ")`;
        if(abs($yAng)<abs($zAng)&&abs($xAng)<abs($zAng))
        { 
            $angAxis="rz";
            duplicate -rr -n ($models[0]+"_rotZ_"+$zAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool; 
        }else if(abs($yAng)>abs($zAng)&&abs($yAng)>abs($xAng))
        {
            $angAxis="ry";
            duplicate -rr -n ($models[0]+"_rotY_"+$yAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool;   
        }else if(abs($xAng)>abs($zAng)&&abs($xAng)>abs($yAng))
        {
            $angAxis="rx";
            duplicate -rr -n ($models[0]+"_rotX_"+$yAng);
            $dupModel=`ls -sl`;    
            setAttr ($models[0]+".visibility") 0;
            SculptGeometryTool;   
        }
    
}
return $angAxis;
textField -e  -text $angAxis angleBox ;
}


global proc ApplyCorrectiveShape (string $name,string $angAxis,string $modelss,string $cBlend)
{
string $newInvertModel;
string $versionString;
$versionString=`about -v`;
string $models=$modelss;
float $cTime=`currentTime -q` ;
string $dupModel[]=`ls -sl`;
int $faceOrBody= `getAttr ($cBlend+".type")`;
if($faceOrBody==0)
{
if($angAxis=="tx")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateX") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".translateX") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateX") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateX") ($models+"_corrective."+$bCSNew);
                //ResetFacial($name);
                setAttr ($cBlend+".translateX") 0;
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateX") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }



if($angAxis=="ty")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateY") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".translateY") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateY") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".translateY") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }


if($angAxis=="tz")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".translateZ") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".translateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".translateZ") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".translateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }
    
    
//////
//////////////
if($angAxis=="rx")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateX") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateX") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateX") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateX") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateX") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateX") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }



if($angAxis=="ry")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateY") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateY") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateY") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateY") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }


if($angAxis=="rz")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateZ") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($cBlend+".rotateZ") 0;
                //ResetFacial($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".rotateZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }
}


else if($faceOrBody>0)
{
if($angAxis=="y")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
         select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".angleY") ($models+"_corrective."+$bCSNew);
                wfResetAll($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".angleY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".angleY") ($models+"_corrective."+$bCSNew);
                wfResetAll($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".angleY") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }


if($angAxis=="z")
    {
        string $bCSNew=$dupModel[0];
        if( $versionString=="2016")
        {
        select -r $dupModel[0] $models;
        CorrectiveShape;
        }else 
        {
        select -r $models $dupModel[0];
        $newInvertModel=`invertShape`;
        select $newInvertModel;
        }
        string $bCSModel[]=`ls -sl`;
        delete $dupModel[0];
        rename $bCSModel[0] $bCSNew;
        
        select -add $models ;
        $checkValue=`objExists ($models+"_corrective")`;
        if($checkValue==0)
                {
                blendShape -frontOfChain -tc 0 -n ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".angleZ") ($models+"_corrective."+$bCSNew);
                wfResetAll($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".angleZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1;
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }else
                {
                float $numBlend[]=`blendShape -q  -w ($models+"_corrective")`;
                int $sizeBlend=size($numBlend);
                blendShape -e  -tc 0 -t ($models) $sizeBlend $bCSNew 1 ($models+"_corrective");
                setAttr ($models+"_corrective."+$bCSNew) 1;
                setDrivenKeyframe -currentDriver ($cBlend+".angleZ") ($models+"_corrective."+$bCSNew);
                wfResetAll($name);
                setAttr ($models+"_corrective."+$bCSNew) 0;
                setDrivenKeyframe -currentDriver ($cBlend+".angleZ") ($models+"_corrective."+$bCSNew);
                setAttr ($models+".visibility") 1; 
                setAttr ($bCSNew+".visibility") 0; 
                //delete $bCSNew;
                }
    }
}
currentTime 0 ;
currentTime $cTime ;
}


///////////
//////////////
///////////////////
////////////////////////
//////////////////////////////
////////////////////////////////////////
proc CorrectiveShapeVectorMove( string $TweakVertexName, string $BaseModelVertexName,
                                       float $WorldPosX,  float $WorldPosY,  float $WorldPosZ,
                                       float $targetPosX, float $targetPosY, float $targetPosZ,
                                       float $relPosX,    float $relPosY,    float $relPosZ ) {

  float $tempPos[3];
  float $Matrix[12];

  setAttr ($TweakVertexName + "].xVertex") ($relPosX + 1);
  $tempPos = `pointPosition -w $BaseModelVertexName`;
  $Matrix[0]  = $tempPos[0]-$WorldPosX;
  $Matrix[4]  = $tempPos[1]-$WorldPosY;
  $Matrix[8]  = $tempPos[2]-$WorldPosZ;
  $Matrix[3]  = $targetPosX;

  setAttr ($TweakVertexName + "].xVertex") ($relPosX);
  setAttr ($TweakVertexName + "].yVertex") ($relPosY + 1);
  $tempPos = `pointPosition -w $BaseModelVertexName`;
  $Matrix[1]  = $tempPos[0]-$WorldPosX;
  $Matrix[5]  = $tempPos[1]-$WorldPosY;
  $Matrix[9]  = $tempPos[2]-$WorldPosZ;
  $Matrix[7]  = $targetPosY;


  setAttr ($TweakVertexName + "].yVertex") ($relPosY);
  setAttr ($TweakVertexName + "].zVertex") ($relPosZ + 1);
  $tempPos = `pointPosition -w $BaseModelVertexName`;
  $Matrix[2]  = $tempPos[0]-$WorldPosX;
  $Matrix[6]  = $tempPos[1]-$WorldPosY;
  $Matrix[10] = $tempPos[2]-$WorldPosZ;
  $Matrix[11] = $targetPosZ;

  float $return[3];
  float $Denominator = 

  ($Matrix[0] * (($Matrix[5]*$Matrix[10]) - ($Matrix[6]*$Matrix[9]))) - 
  ($Matrix[1] * (($Matrix[4]*$Matrix[10]) - ($Matrix[6]*$Matrix[8]))) + 
  ($Matrix[2] * (($Matrix[4]*$Matrix[9] ) - ($Matrix[5]*$Matrix[8])));

  if ($Denominator != 0) { 

    $return[0] = 
 
    (
    ($Matrix[3] * (($Matrix[5]*$Matrix[10]) - ($Matrix[6]*$Matrix[9]  ))) - 
    ($Matrix[1] * (($Matrix[7]*$Matrix[10]) - ($Matrix[6]*$Matrix[11] ))) + 
    ($Matrix[2] * (($Matrix[7]*$Matrix[9] ) - ($Matrix[5]*$Matrix[11] )))
    ) / $Denominator;

    $return[1] = 
 
    (
    ($Matrix[0] * (($Matrix[7]*$Matrix[10]) - ($Matrix[6]*$Matrix[11] ))) -
    ($Matrix[3] * (($Matrix[4]*$Matrix[10]) - ($Matrix[6]*$Matrix[8]  ))) + 
    ($Matrix[2] * (($Matrix[4]*$Matrix[11]) - ($Matrix[7]*$Matrix[8]  )))
    ) / $Denominator;

    $return[2] =

    (
    ($Matrix[0] * (($Matrix[5]*$Matrix[11]) - ($Matrix[7]*$Matrix[9]  ))) - 
    ($Matrix[1] * (($Matrix[4]*$Matrix[11]) - ($Matrix[7]*$Matrix[8]  ))) + 
    ($Matrix[3] * (($Matrix[4]*$Matrix[9] ) - ($Matrix[5]*$Matrix[8]  )))
    ) / $Denominator;

    setAttr ($TweakVertexName + "].xVertex") ($relPosX + $return[0]);
    setAttr ($TweakVertexName + "].yVertex") ($relPosY + $return[1]);
    setAttr ($TweakVertexName + "].zVertex") ($relPosX + $return[2]);
        
  }
}


// __________________________________________________________________________________________
// VertexMatrix procedure
// __________________________________________________________________________________________

proc float[] CorrectiveShapePosition( string $BlendShapeVertexName, 
                                             string $BaseModelVertexName, 
                                             float $OffsetX, float $OffsetY, float $OffsetZ) {

  float $targetPos[3];
  float $Pos[3];
  float $relVertexPos[3];

  $targetPos = `pointPosition -w $BlendShapeVertexName`;
  $Pos = `pointPosition -w $BaseModelVertexName`;
  $relVertexPos = `getAttr $BaseModelVertexName`;

  $targetPos[0] -= ($Pos[0]+$OffsetX);
  $targetPos[1] -= ($Pos[1]+$OffsetY);
  $targetPos[2] -= ($Pos[2]+$OffsetZ); 

  if (($targetPos[0]>0.001) || ($targetPos[0]<-0.001) || 
      ($targetPos[1]>0.001) || ($targetPos[1]<-0.001) || 
      ($targetPos[2]>0.001) || ($targetPos[2]<-0.001))

    return { 1.0,
             $Pos[0],          $Pos[1],          $Pos[2],
             $targetPos[0],    $targetPos[1],    $targetPos[2],
             $relVertexPos[0], $relVertexPos[1], $relVertexPos[2] };
  
  else 

    return { -1.0 };     

}

// __________________________________________________________________________________________
// Main Procedure
// __________________________________________________________________________________________

global proc CorrectiveShape() {

// __________________________________________________________________________________________
// Declaring main variables & Query names and selections 
// __________________________________________________________________________________________

  string $SelectedVertexArray[] = `filterExpand -sm 31`;   // Vertex
  string $SelectedItemArray[] = `ls -selection -long`;     // All - with hierarchy
  string $SelectedMeshArray[] = `filterExpand -sm 12`;     // Polygon
  string $BaseModel;
  string $BlendShape;

  int $SelectedVertexNumberArray[];
  int $SelectionTrue = 0;
  int $BREAK = 0;
  int $FailureList = 0; // [0: Everything OK] [1: Selection is false] [2: Skin is missing] [3: User abort] [4: PolyCount not identical] [5: Nothing to Move]

  int $VertexCount = `size $SelectedVertexArray`;
  int $ItemCount = `size $SelectedItemArray`;
  int $MeshCount = `size $SelectedMeshArray`;

  if (($VertexCount > 0) && ($MeshCount == 1)) {

    $SelectionTrue = 1;
    string $Temp[];
    $BaseModel = $SelectedItemArray[($ItemCount - 1)];   
    tokenize $SelectedItemArray[0] "." $Temp;
    $BlendShape = $Temp[0];
    tokenize $SelectedVertexArray[0] "[" $Temp;
    int $TempPrefixSize = `size $Temp[0]` + 2; 

    for ($i = 0; $i < ($VertexCount); $i++) {

      string $TempString = $SelectedVertexArray[$i];
      int $TempSuffixSize = `size $TempString` - 1;
      $SelectedVertexNumberArray[$i] = `substring $TempString $TempPrefixSize $TempSuffixSize`;
   
    }  
  }

  else if (($MeshCount == 2) && ($ItemCount == 2)) {

    $BlendShape = $SelectedItemArray[0];
    $BaseModel = $SelectedItemArray[1];    

  }

  else {

    $BREAK = 1;
    $FailureList = 1;

  }

// __________________________________________________________________________________________
// Finding appropriate skinClusters & tweakNode
// __________________________________________________________________________________________


  string $TweakNode;
  string $Skin[];

  float $Progress = 0.0;

  if (! $BREAK) {

    string $BaseHistory[] = `listHistory`;
    
    int $HistorySize = `size $BaseHistory`;

    for ($i = 0; $i < $HistorySize; $i++) {

      string $TempHistory = `nodeType $BaseHistory[$i]`;

      if ($TempHistory == "tweak") 
        $TweakNode = $BaseHistory[$i];
      else if ($TempHistory == "skinCluster")
        $Skin[`size $Skin`] = $BaseHistory[$i];

    }

    if ($TweakNode == "" || $Skin[0] == "") {

      $BREAK = 1;
      $FailureList = 2;
 
    }
  }

// __________________________________________________________________________________________
// Initializing & PolyCount
// __________________________________________________________________________________________

  float $Offset[3];

  int $BaseVertexCount[];

  string $vertexNameArray[];
  string $TweakVertexArray[];
  string $BaseModellVertexNameArray[];


  if (! $BREAK) {

    progressWindow

      -title "Corrective Shape"
      -progress $Progress
      -status "Calculating VertexMovements"
      -isInterruptable true
      -min 0
      -max 100;

    float $BaseTempOffset[3];
    float $BlendTempOffset[3];

    $BaseVertexCount = `polyEvaluate -v $BaseModel`;
    $BaseTempOffset = `getAttr ($BaseModel+".translate")`;
    $BlendTempOffset = `getAttr ($BlendShape+".translate")`;

    $Offset[0] = $BlendTempOffset[0] - $BaseTempOffset[0];
    $Offset[1] = $BlendTempOffset[1] - $BaseTempOffset[1];
    $Offset[2] = $BlendTempOffset[2] - $BaseTempOffset[2];


    int $BlendVertexCount[] = `polyEvaluate -v $BlendShape`;

    string $ShapeNode[] = `pickWalk -d down $BaseModel`;

    if (! `connectionInfo -isDestination ($ShapeNode[0] + ".tweakLocation")`)
      connectAttr ($TweakNode + ".vlist[0].vertex[0]") ($ShapeNode[0] + ".tweakLocation");


    if ($BaseVertexCount[0] != $BlendVertexCount[0]) {

      $BREAK = 1;
      $FailureList = 4;     

    }
  }

// __________________________________________________________________________________________
// Query VertexPosition
// __________________________________________________________________________________________

  float $targetPosArray[];
  float $absPosArray[];
  float $relPosArray[];

  if (! $BREAK) {

    if (! $SelectionTrue) {

      $VertexCount = $BaseVertexCount[0];

    }

    for ($i = 0; $i < $VertexCount; $i++) {

      if ( `progressWindow -query -isCancelled` ) {
      
        $BREAK = 1;
        $FailureList = 3; 
        break;

      }

      int $LastProgress = $Progress;
      $Progress = `trunc (20.0 * $i / $VertexCount + 0.5)`;
          
      if ($LastProgress != $Progress)
        progressWindow -e -progress $Progress;

      string $VertexAppendix;

      if (! $SelectionTrue)
        $SelectedVertexNumberArray[$i] = $i;

      $VertexAppendix = ".vtx[" + $SelectedVertexNumberArray[$i] + "]";

      string $BaseModelVertexName = $BaseModel + $VertexAppendix;
      string $BlendShapeVertexName = $BlendShape + $VertexAppendix;

      float $PositionArray[10];

      $PositionArray = `CorrectiveShapePosition $BlendShapeVertexName $BaseModelVertexName $Offset[0] $Offset[1] $Offset[2]`;

      if ($PositionArray[0] == 1) {

        int $vertexArraySize = `size $vertexNameArray` * 3;

        $vertexNameArray[$vertexArraySize / 3] = $BaseModelVertexName;
        $TweakVertexArray[$vertexArraySize / 3] = $TweakNode + ".vlist[0].vertex[" + $SelectedVertexNumberArray[$i];

        $absPosArray[$vertexArraySize] = $PositionArray[1];
        $absPosArray[$vertexArraySize + 1] = $PositionArray[2];
        $absPosArray[$vertexArraySize + 2] = $PositionArray[3];

        $targetPosArray[$vertexArraySize] = $PositionArray[4];
        $targetPosArray[$vertexArraySize + 1] = $PositionArray[5];
        $targetPosArray[$vertexArraySize + 2] = $PositionArray[6];

        $relPosArray[$vertexArraySize] = $PositionArray[7];
        $relPosArray[$vertexArraySize + 1] = $PositionArray[8];
        $relPosArray[$vertexArraySize + 2] = $PositionArray[9];

      }
    }
  }

// __________________________________________________________________________________________
// Ask user about high VertexMovements
// __________________________________________________________________________________________

  int $vertexNameArraySize = `size $vertexNameArray`;
  int $PercentMoved;

  if ($vertexNameArraySize > 0) 
    $PercentMoved = `trunc (0.5 + $vertexNameArraySize / $VertexCount * 100)`;

  else {

    $BREAK = 1;
    $FailureList = 5;

  } 

  
  if ($PercentMoved > 50) {

    if (`confirmDialog 

                      -title "Moving Vertex"
                      -message ("About " + $PercentMoved +"% vertices will be moved. Proceed?")
                      -button "Proceed" -button "Abort"
                      -defaultButton "Proceed" -cancelButton "Abort"
                      -dismissString "Abort"` 
 
       == "Abort") {
       $BREAK = 1;
       $FailureList = 3;
       
    }
  }  


// __________________________________________________________________________________________
// Calculating vertexMatrix & moving
// __________________________________________________________________________________________


  if (! $BREAK) {
 
    progressWindow -e -status ("Moving " + $vertexNameArraySize + " vertices");


    for ($i = 0; $i < $vertexNameArraySize; $i++) {

      if ( `progressWindow -query -isCancelled` ) {
      
        $BREAK = 1;
        $FailureList = 3; 
        break;

      }


      int $LastProgress = $Progress;
      $Progress = `trunc (20.0 + 60.0 * $i / $vertexNameArraySize + 0.5)`;

      if ($LastProgress != $Progress)
        progressWindow -e -progress $Progress;

      int $ArrayPos = $i * 3;

      CorrectiveShapeVectorMove $TweakVertexArray[$ArrayPos / 3] $vertexNameArray[$ArrayPos / 3]
                                       $absPosArray[$ArrayPos]          $absPosArray[$ArrayPos + 1]     $absPosArray[$ArrayPos + 2]
                                       $targetPosArray[$ArrayPos]       $targetPosArray[$ArrayPos + 1]  $targetPosArray[$ArrayPos + 2]
                                       $relPosArray[$ArrayPos]          $relPosArray[$ArrayPos + 1]     $relPosArray[$ArrayPos + 2];

    }
  }


// __________________________________________________________________________________________
// Duplicating baseMesh
// __________________________________________________________________________________________


  string $AllInputs[] = `listHistory $BaseModel`;
  string $MutedTypes[] = {"skinCluster", "blendShape"};


  if (! $BREAK) {

    for ($i = 0; $i < `size $AllInputs`; $i++){
      for ($z = 0; $z < `size $MutedTypes`; $z++){

      if (`nodeType $AllInputs[$i]` ==  $MutedTypes[$z])
        setAttr ($AllInputs[$i] + ".nodeState") 1;
 
      }
    }

    string $BlendDuplicate[] = `duplicate -rc -rr $BaseModel`;
    string $UnlockAttributes[] = {".tx",".ty",".tz",".rx",".ry",".rz",".sx",".sy",".sz"};

    for ($i = 0; $i < 9; $i++) {

      setAttr -lock 0 ($BlendDuplicate[0] + $UnlockAttributes[$i]);

    }
     
    select -r $BlendDuplicate[0];  
 
  }


// __________________________________________________________________________________________
// Reseting baseMesh
// __________________________________________________________________________________________
  
  progressWindow -e -st "Reseting BaseMesh";

  for ($i = 0; $i < $vertexNameArraySize; $i++) {

    int $LastProgress = $Progress;
    $Progress = `trunc (80.0 + 20.0 * $i / $vertexNameArraySize + 0.5)`;

    if ($LastProgress != $Progress)
      progressWindow -e -progress $Progress;

    int $ArrayPos = $i * 3;

    setAttr ($TweakVertexArray[$ArrayPos / 3] + "].xVertex") $relPosArray[$ArrayPos];
    setAttr ($TweakVertexArray[$ArrayPos / 3] + "].yVertex") $relPosArray[$ArrayPos + 1];
    setAttr ($TweakVertexArray[$ArrayPos / 3] + "].zVertex") $relPosArray[$ArrayPos + 2];

  }


  for ($i = 0; $i < `size $AllInputs`; $i++){
    for ($z = 0; $z < `size $MutedTypes`; $z++){

    if (`nodeType $AllInputs[$i]` ==  $MutedTypes[$z])
      setAttr ($AllInputs[$i] + ".nodeState") 0;
 
    }
  }

  progressWindow -endProgress;

// __________________________________________________________________________________________
// Feedback to user
// __________________________________________________________________________________________

  if ($FailureList != 0) {

    string $Feedback;
    switch ($FailureList) {

      case 1:
        $Feedback = "Wrong number of objects selected!";
        break;
      case 2:
        $Feedback = "Second mesh has no skinCluster!";
        break;
      case 3:
        $Feedback = "Procedure aborted by user!";
        break;
      case 4:
        $Feedback = "Not identical amount of vertices!";
        break;
      case 5:
        $Feedback = "Nothing to move!";
        break;
    }

    confirmDialog   -title "Failure - Procedure aborted" 
                    -message $Feedback
                    -button "OK";

  }
}

/////////
////////////////
///////////////////
////////////////////////
/////////////////////////////////

global proc addAngleAttr (string $name)
{
        string $alljnts[]=`ls -sl`;
        autoKeyframe -state false;
        $cTime=`currentTime -q`;
        currentTime 0 ;
        wfResetAll($name);
        select -r $alljnts;
        
        for($objss in $alljnts)
        {
            select -r $objss;
        string $selJoint[]=`ls -sl`;
        string $mainJoint=$selJoint[0];
        $selJoint=`pickWalk -d up`;
        string $preJoint=$selJoint[0];
        select -r $selJoint;
        $selJoint=`pickWalk -d down`;
        $selJoint=`pickWalk -d right`;
        string $secondJoint=$selJoint[0];
        ///////////////
        select -cl;
        int $checkValues=`objExists ($name+"_AngleGrp")`;
                if($checkValues==0)
                        {
        group -em -n ($name+"_AngleGrp");
        parent ($name+"_AngleGrp") ($name+"_all_anim");
        select -cl;
        }
        ////////
        spaceLocator -n ($mainJoint+"_AngleSampler") -p 0 0 0;
        parentConstraint -n "AnglePcTest" $mainJoint ($mainJoint+"_AngleSampler");
        delete AnglePcTest;
        parent ($mainJoint+"_AngleSampler") $mainJoint;
        float $tx=`getAttr ($secondJoint+".translateX")`;
        $tx=0.707;
        select -r ($mainJoint+"_AngleSampler") ;
        duplicate -rr -n "RAngleSamplerYNeg";
        duplicate -rr -n "RAngleSamplerYPos";
        duplicate -rr -n "RAngleSamplerZNeg";
        duplicate -rr -n "RAngleSamplerZPos";
        setAttr ("RAngleSamplerYNeg"+".ty") $tx;
        setAttr ("RAngleSamplerYPos"+".ty") (-$tx);
        setAttr ("RAngleSamplerZNeg"+".tz") $tx;
        setAttr ("RAngleSamplerZPos"+".tz") (-$tx);
        setAttr ($mainJoint+"_AngleSampler"+".tx") $tx;
        parent ("RAngleSamplerYNeg") ("RAngleSamplerYPos") ("RAngleSamplerZNeg") ("RAngleSamplerZPos") $preJoint;
        shadingNode -n "RDistanceYNeg" -asUtility distanceBetween;
        shadingNode -n "RDistanceYPos" -asUtility distanceBetween;
        shadingNode -n "RDistanceZNeg" -asUtility distanceBetween;
        shadingNode -n "RDistanceZPos" -asUtility distanceBetween;
        connectAttr -f ($mainJoint+"_AngleSampler"+".worldPosition[0]") ("RDistanceYNeg"+".point2");
        connectAttr -f ($mainJoint+"_AngleSampler"+".worldPosition[0]") ("RDistanceYPos"+".point2");
        connectAttr -f ($mainJoint+"_AngleSampler"+".worldPosition[0]") ("RDistanceZNeg"+".point2");
        connectAttr -f ($mainJoint+"_AngleSampler"+".worldPosition[0]") ("RDistanceZPos"+".point2");
        connectAttr -f ("RAngleSamplerYNegShape"+".worldPosition[0]") ("RDistanceYNeg"+".point1");
        connectAttr -f ("RAngleSamplerYPosShape"+".worldPosition[0]") ("RDistanceYPos"+".point1");
        connectAttr -f ("RAngleSamplerZNegShape"+".worldPosition[0]") ("RDistanceZNeg"+".point1");
        connectAttr -f ("RAngleSamplerZPosShape"+".worldPosition[0]") ("RDistanceZPos"+".point1");
        shadingNode -n "ROneMinusNeg" -asUtility plusMinusAverage;
        setAttr ("ROneMinusNeg"+".operation") 2;
        setAttr ("ROneMinusNeg"+".input3D[0].input3Dx") 1;
        setAttr ("ROneMinusNeg"+".input3D[0].input3Dy") 1;
        setAttr ("ROneMinusNeg"+".input3D[0].input3Dz") 1;
        setAttr ("ROneMinusNeg"+".input3D[1].input3Dx") 0;
        connectAttr -f ("RDistanceYNeg"+".distance") ("ROneMinusNeg"+".input3D[1].input3Dy");
        connectAttr -f ("RDistanceZNeg"+".distance") ("ROneMinusNeg"+".input3D[1].input3Dz");
        shadingNode -n "ROneMinusPos" -asUtility plusMinusAverage;
        setAttr ("ROneMinusPos"+".operation") 2;
        connectAttr -f ("RDistanceYPos"+".distance") ("ROneMinusPos"+".input3D[1].input3Dy");
        connectAttr -f ("RDistanceZPos"+".distance") ("ROneMinusPos"+".input3D[1].input3Dz");
        setAttr ("ROneMinusPos"+".input3D[0].input3Dx") 1;
        setAttr ("ROneMinusPos"+".input3D[0].input3Dy") 1;
        setAttr ("ROneMinusPos"+".input3D[0].input3Dz") 1;
        setAttr ("ROneMinusPos"+".input3D[1].input3Dx") 0;
        shadingNode -n ("RAngleInverseY") -asUtility unitConversion;
        setAttr ("RAngleInverseY"+".conversionFactor") -1;
        shadingNode -n ("RAngleInverseZ") -asUtility unitConversion;
        setAttr ("RAngleInverseZ"+".conversionFactor") -1;
        connectAttr -f ("ROneMinusNeg"+".output3Dy") ("RAngleInverseY"+".input");
        connectAttr -f ("ROneMinusNeg.output3Dz") ("RAngleInverseZ"+".input");
        shadingNode -n ("RAngleConditionY") -asUtility condition;
        connectAttr -f ("RAngleInverseY"+".output") ("RAngleConditionY"+".colorIfFalseG");
        connectAttr -f ("ROneMinusNeg"+".output3Dy") ("RAngleConditionY"+".secondTerm");
        connectAttr -f ("ROneMinusPos"+".output3Dy") ("RAngleConditionY"+".colorIfTrueG");
        connectAttr -f ("ROneMinusPos"+".output3Dy") ("RAngleConditionY"+".firstTerm");
        setAttr ("RAngleConditionY"+".operation") 2;
        setAttr ("RAngleConditionY"+".colorIfTrueR") 0;
        setAttr ("RAngleConditionY"+".colorIfTrueB") 0;
        setAttr ("RAngleConditionY"+".colorIfFalseR") 1;
        setAttr ("RAngleConditionY"+".colorIfFalseB") 1;
        shadingNode -n ("RAngleConditionZ") -asUtility condition;
        connectAttr -f ("RAngleInverseZ"+".output") ("RAngleConditionZ"+".colorIfFalseB");
        connectAttr -f ("ROneMinusNeg"+".output3Dz") ("RAngleConditionZ"+".secondTerm");
        connectAttr -f ("ROneMinusPos"+".output3Dz") ("RAngleConditionZ"+".firstTerm");
        connectAttr -f ("ROneMinusPos"+".output3Dz") ("RAngleConditionZ"+".colorIfTrueB");
        setAttr ("RAngleConditionZ"+".operation") 2;
        setAttr ("RAngleConditionZ"+".colorIfTrueR") 0;
        setAttr ("RAngleConditionZ"+".colorIfTrueG") 0;
        setAttr ("RAngleConditionZ"+".colorIfFalseR") 1;
        setAttr ("RAngleConditionZ"+".colorIfFalseG") 1;
        addAttr -ln "angleY"  -at double  -dv 0 $mainJoint;
        setAttr -e-keyable true ($mainJoint+".angleY");
        addAttr -ln "angleZ"  -at double  -dv 0 $mainJoint;
        setAttr -e-keyable true ($mainJoint+".angleZ");
        connectAttr -f ("RAngleConditionY"+".outColorG") ($mainJoint+".angleY");
        connectAttr -f ("RAngleConditionZ"+".outColorB") ($mainJoint+".angleZ");
        select -r ("RAngleSamplerYNeg") ("RAngleSamplerYPos") ("RAngleSamplerZNeg") ("RAngleSamplerZPos") ($mainJoint+"_AngleSampler") ;
        parent -w;
        group -n ("RAngleGrp");
        setAttr ("RAngleGrp"+".inheritsTransform") 0;
        parentConstraint -mo $preJoint ("RAngleSamplerYNeg");
        parentConstraint -mo $preJoint ("RAngleSamplerZNeg");
        parentConstraint -mo $preJoint ("RAngleSamplerYPos");
        parentConstraint -mo $preJoint ("RAngleSamplerYPos");
        parentConstraint -mo $mainJoint ($mainJoint+"_AngleSampler");
        setAttr ("RAngleGrp"+".visibility") 0;
        rename ("RAngleGrp") ($mainJoint+"AngleGrp");
        parent ($mainJoint+"AngleGrp") ($name+"_AngleGrp");
        
        rename "RAngleSamplerYNeg" ($mainJoint+"_AngleSamplerYNeg");
        rename "RAngleSamplerYPos" ($mainJoint+"_AngleSamplerYPos");
        rename "RAngleSamplerZNeg" ($mainJoint+"_AngleSamplerZNeg");
        rename "RAngleSamplerZPos" ($mainJoint+"_AngleSamplerZPos");
        
        
        rename "RDistanceYNeg" ($mainJoint+"_DistanceYNeg");
        rename "RDistanceYPos" ($mainJoint+"_DistanceYPos");
        rename "RDistanceZNeg" ($mainJoint+"_DistanceZNeg");
        rename "RDistanceZPos" ($mainJoint+"_DistanceZPos");
        
        rename "ROneMinusNeg" ($mainJoint+"_OneMinusNeg");
        rename "ROneMinusPos" ($mainJoint+"_OneMinusPos");
        
        rename ("RAngleInverseY") ($mainJoint+"_AngleInverseY");
        rename ("RAngleInverseZ") ($mainJoint+"_AngleInverseZ");
        rename ("RAngleConditionY") ($mainJoint+"_AngleConditionY");
        rename ("RAngleConditionZ") ($mainJoint+"_AngleConditionZ");
        }
currentTime $cTime ;
}

///////////
////////////
global proc addAngleAttrB (string $name)
{
        string $alljnts[]=`ls -sl`;
        autoKeyframe -state false;
        $cTime=`currentTime -q`;
        currentTime 0 ;
        wfResetAll($name);
        select -r $alljnts;
        
        for($objss in $alljnts)
        {
            select -r $objss;
        string $selJoint[]=`ls -sl`;
        string $mainJoint=$selJoint[0];
        $selJoint=`pickWalk -d up`;
        string $preJoint=$selJoint[0];
        select -r $selJoint;
        $selJoint=`pickWalk -d down`;
        $selJoint=`pickWalk -d right`;
        string $secondJoint=$selJoint[0];
        ///////////////
        select -cl;
        int $checkValues=`objExists ($name+"_AngleGrp")`;
                if($checkValues==0)
                        {
        group -em -n ($name+"_AngleGrp");
        parent ($name+"_AngleGrp") ($name+"_all_anim");
        select -cl;
        }
        ////////
addAttr -ln "angleY"  -at double  -dv 0 $mainJoint;
setAttr -e-keyable true ($mainJoint+".angleY");
addAttr -ln "angleZ"  -at double  -dv 0 $mainJoint;
setAttr -e-keyable true ($mainJoint+".angleZ");
createNode PRAngleDriver -n ($mainJoint+"_prDriver");
connectAttr -f ($mainJoint+".rotate") ($mainJoint+"_prDriver.input");
connectAttr -f ($mainJoint+".rotateOrder") ($mainJoint+"_prDriver.rotationOrder");
connectAttr -f ($mainJoint+"_prDriver.DrivenY") ($mainJoint+".angleY");
connectAttr -f ($mainJoint+"_prDriver.DrivenZ") ($mainJoint+".angleZ");
        }
currentTime $cTime ;
}
/////////////////
////////////
/////////////////

///////////////////
/////////////////////
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc biped_LArmMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
    {string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=($name);
    switch($index)
        {       
//for Ik Copy Value
            case 9:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_elbow_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_elbow_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
                       string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_elbow_curve_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            break;
//for Fk Copy Value
                        case 109:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]) $f;
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_orient_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_orient_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upArm_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_upArm_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowArm_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_lowArm_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_elbow_curve_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            break;
//       
            case 10:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_elbow_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_elbow_anim"+"."+$attrs[$i]) $f;
            }
            ///////
            string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) $f;	
            }

            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_elbow_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) $f;	
            }
            break;
//for Fk Paste Value
                        case 110:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) $f;
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_orient_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_orient_anim"+"."+$attrs[$i]) $f;	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upArm_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_upArm_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowArm_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_lowArm_anim"+"."+$attrs[$i]) $f;	
            }
            
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_elbow_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) $f;	
            }
            break;
//    
            case 11:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) (-$f); else 
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) ($f);
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[0]) (-$f);
            float $f=getAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[1]);
            setAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[1]) (-$f);
            float $f=getAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[2]);
            setAttr ($prefix+"_l_ik_hand_anim"+"."+$attrs[2]) (-$f);
            string $attrs[]=`listAttr -k -u($prefix+"_l_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_elbow_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ik_elbow_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_r_ik_elbow_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_l_ik_elbow_anim"+"."+$attrs[0]) (-$f);
            ////////////
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) (-$f); else	
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_elbow_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) (-$f);	
            }            
            break;
//for Fk Mirror Paste Value
                        case 111:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) (-$f); else 
            setAttr ($prefix+"_l_shoulder_anim"+"."+$attrs[$i]) ($f);
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_orient_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_l_upArm_orient_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_upArm_orient_anim"+"."+$attrs[$i]) ($f);	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upArm_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_upArm_anim"+"."+$attrs[$i]) ($f);	else
            setAttr ($prefix+"_l_fk_upArm_anim"+"."+$attrs[$i]) $f;
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_lowArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum-1);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowArm_anim_mirror"+"."+$attrs[$i]);
            if ($i==1)
            setAttr ($prefix+"_l_fk_lowArm_anim"+"."+$attrs[$i]) ($f); else
            setAttr ($prefix+"_l_fk_lowArm_anim"+"."+$attrs[$i]) ($f);	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) ($f); else	
            setAttr ($prefix+"_l_fk_hand_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_upArm_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_lowArm_middle_anim"+"."+$attrs[$i]) (-$f);	
            } 
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_elbow_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_elbow_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_elbow_curve_anim"+"."+$attrs[$i]) (-$f);	
            }
            break;
       }//for Index
    }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc biped_LLegMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
    {string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=($name);
    switch($index)
        {       
//for Ik Copy Value
            case 3:
            string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]) ($f);	
            }
            break;
//for Fk Copy Value
                        case 103:
                    string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]) ($f);	
            }
            break;
//       
            case 4:
            string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]) $f;
            }
            ///////
                        string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) ($f);	
            }
            
            break;
//for Fk Paste Value
                        case 104:
                    string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) ($f);	
            }
            break;
//    
            case 5:
            string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_l_foot_anim"+"."+$attrs[0]) (-$f);
            float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[4]);
            setAttr ($prefix+"_l_foot_anim"+"."+$attrs[4]) (-$f);
            float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[5]);
            setAttr ($prefix+"_l_foot_anim"+"."+$attrs[5]) (-$f);
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_l_knee_anim"+"."+$attrs[0]) (-$f);
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) (-$f);	
            }
            break;
//for Fk Mirror Paste Value
                        case 105:
            string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) (-$f);	else
            setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) $f;
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) (-$f); else	
            setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }

            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_l_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_l_knee_curve_anim"+"."+$attrs[$i]) (-$f);	
            }
             break;
        }//for Index
    }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc biped_RArmMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
    {string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=($name);
    switch($index)
        {       
//for Ik Copy Value
            case 11:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_elbow_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_elbow_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
                       string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
            break;
//for Fk Copy Value
                        case 111:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]) $f;
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_orient_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_orient_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upArm_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_upArm_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowArm_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_lowArm_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            break;
//       
            case 12:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_ik_elbow_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_elbow_anim"+"."+$attrs[$i]) $f;
            }
            ///////
            string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            break;
//for Fk Paste Value
                        case 112:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_r_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_shoulder_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) $f;
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_orient_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_orient_anim"+"."+$attrs[$i]) $f;	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upArm_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_upArm_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowArm_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_lowArm_anim"+"."+$attrs[$i]) $f;	
            }
            
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) $f;	
            }
            break;
//    
            case 13:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) (-$f); else 
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) ($f);
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[0]) (-$f);
            float $f=getAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[1]);
            setAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[1]) (-$f);
            float $f=getAttr ($prefix+"_l_ik_hand_anim_mirror"+"."+$attrs[2]);
            setAttr ($prefix+"_r_ik_hand_anim"+"."+$attrs[2]) (-$f);

            string $attrs[]=`listAttr -k -u($prefix+"_r_ik_elbow_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_ik_elbow_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ik_elbow_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_l_ik_elbow_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_r_ik_elbow_anim"+"."+$attrs[0]) (-$f);
            ////////////
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) (-$f); else	
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) ($f); else
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) ($f);	
            }            
            break;
//for Fk Mirror Paste Value
                        case 113:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fingers_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fingers_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fingers_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_pointer_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_pointer_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pointer_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_middle_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_ring_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_ring_anim"+"."+$attrs[$i]) $f;
            float $f=getAttr ($prefix+"_l_pinky_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_pinky_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_thumb_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_thumb_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_thumb_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_shoulder_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_shoulder_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) (-$f); else 
            setAttr ($prefix+"_r_shoulder_anim"+"."+$attrs[$i]) ($f);
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_orient_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_orient_anim_mirror"+"."+$attrs[$i]);
			if ($i==0)
            setAttr ($prefix+"_r_upArm_orient_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_upArm_orient_anim"+"."+$attrs[$i]) ($f);	
            }
                    string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upArm_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_upArm_anim"+"."+$attrs[$i]) ($f);	else
            setAttr ($prefix+"_r_fk_upArm_anim"+"."+$attrs[$i]) $f;
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_lowArm_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum-1);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowArm_anim_mirror"+"."+$attrs[$i]);
            if ($i==1)
            setAttr ($prefix+"_r_fk_lowArm_anim"+"."+$attrs[$i]) ($f); else
            setAttr ($prefix+"_r_fk_lowArm_anim"+"."+$attrs[$i]) ($f);	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_hand_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_hand_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) ($f); else	
            setAttr ($prefix+"_r_fk_hand_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_upArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) ($f); else
            setAttr ($prefix+"_r_upArm_middle_anim"+"."+$attrs[$i]) ($f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowArm_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowArm_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<1)
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) ($f); else
            setAttr ($prefix+"_r_lowArm_middle_anim"+"."+$attrs[$i]) ($f);	
            } 
            break;
       }//for Index
    }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc biped_RLegMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
    {string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=($name);
    switch($index)
        {       
//for Ik Copy Value
            case 7:
            string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]) ($f);	
            }
            break;
//for Fk Copy Value
                        case 107:
                    string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]) ($f);	
            }
            break;
//       
            case 8:
            string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]) $f;
            }
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]) $f;
            }
            ///////
                        string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) ($f);	
            }
            
            break;
//for Fk Paste Value
                        case 108:
                    string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) $f;	
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) $f;	
            }
            /////////
                        string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_r_knee_curve_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) ($f);	
            }
            break;
//    
            case 9:
            string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_r_foot_anim"+"."+$attrs[0]) (-$f);
            float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[4]);
            setAttr ($prefix+"_r_foot_anim"+"."+$attrs[4]) (-$f);
            float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[5]);
            setAttr ($prefix+"_r_foot_anim"+"."+$attrs[5]) (-$f);
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]);
            setAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]) $f;
            }
            float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[0]);
            setAttr ($prefix+"_r_knee_anim"+"."+$attrs[0]) (-$f);
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) (-$f);	
            }
            break;
//for Fk Mirror Paste Value
                        case 109:
            string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) (-$f);	else
            setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) $f;
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
            }
                        string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) (-$f); else	
            setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) $f;
            } 
                         string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) (-$f); else
            setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) $f;	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
             string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
            }
            ////////////
            string $attrs[]=`listAttr -k -u($prefix+"_r_knee_curve_anim")`;
            int $attrsNum=size($attrs);
            for($i=0;$i<($attrsNum);$i++)
            {
            float $f=getAttr ($prefix+"_l_knee_curve_anim_mirror"+"."+$attrs[$i]);
            if ($i<2)
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) $f; else
            setAttr ($prefix+"_r_knee_curve_anim"+"."+$attrs[$i]) (-$f);	
            }
           break;
        }//for Index
    }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc biped_matchfkik (string $name,int $switch)
{
$ss=`ls -sl`;
if (`size $ss` == 1)
{string $sel_attr[]=`listAttr  $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.switch`;
int $ee=$switch;
int $index =$dd+$ee;
string $prefix=($name+"_");
switch($index)
{
case 3:
select -r  ($prefix+"l_fk_upLeg_anim") ($prefix+"l_fk_lowLeg_anim") ($prefix+"l_fk_foot_anim") ($prefix+"l_fk_toe_anim")  ;
js_matchObj;
setAttr ($prefix+"LLegSetting.FkIk") 0;
break;
case 4:
select -r ($prefix+"l_foot_anim") ($prefix+"l_knee_anim") ;
js_matchObj;
setAttr ($prefix+"LLegSetting.FkIk") 1;
break;
case 7:
select -r ($prefix+"r_fk_upLeg_anim") ($prefix+"r_fk_lowLeg_anim") ($prefix+"r_fk_foot_anim") ($prefix+"r_fk_toe_anim")  ;
js_matchObj;
setAttr ($prefix+"RLegSetting.FkIk") 0;
break;
case 8:
select -r ($prefix+"r_foot_anim") ($prefix+"r_knee_anim") ;
js_matchObj;
setAttr ($prefix+"RLegSetting.FkIk") 1;
break;
case 9:
select -r ($prefix+"l_fk_upArm_anim") ($prefix+"l_fk_lowArm_anim") ($prefix+"l_fk_hand_anim");
js_matchObj;
setAttr ($prefix+"LArmSetting.FkIk") 0;
break;
case 10:
select -r ($prefix+"l_ik_elbow_anim") ($prefix+"l_ik_hand_anim") ($prefix+"l_fk_hand_elbow_anim") ;
js_matchObj;
setAttr ($prefix+"LArmSetting.FkIk") 1;
break;
case 11:
select -r ($prefix+"r_fk_upArm_anim") ($prefix+"r_fk_lowArm_anim") ($prefix+"r_fk_hand_anim");
js_matchObj;
setAttr ($prefix+"RArmSetting.FkIk") 0;
break;
case 12:
select -r ($prefix+"r_ik_elbow_anim") ($prefix+"r_ik_hand_anim") ($prefix+"r_fk_hand_elbow_anim") ;
js_matchObj;
setAttr ($prefix+"RArmSetting.FkIk") 1;
break;
}
select -cl;
}
}}

///////////////////////////
///////////////////////////////////
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########QUADRUPED MIRROR FUNCTIONS
global proc quadruped_LLegBMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
 {string $sel_attr[]=`listAttr $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=$name;
 switch($index)
 { 
//for Ik Copy Value
 case 9:
 string $attrs[]=`listAttr -k -u($prefix+"_l_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_footB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_kneeB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_kneeB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
//for Fk Copy Value
 case 109:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_baseLegB_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_upLegB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_lowLegB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_footB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_footB_anim_mirror"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toeB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_toeB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 10:
 string $attrs[]=`listAttr -k -u($prefix+"_l_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_footB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_kneeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_kneeB_anim"+"."+$attrs[$i]) $f;
 }
 ///////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 
 break;
//for Fk Paste Value
 case 110:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_baseLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_upLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_lowLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_footB_anim"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_toeB_anim"+"."+$attrs[$i]) $f;	
 }
 /////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 11:
 string $attrs[]=`listAttr -k -u($prefix+"_l_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_footB_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_l_footB_anim"+"."+$attrs[0]) (-$f);
 float $f=getAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[4]);
 setAttr ($prefix+"_l_footB_anim"+"."+$attrs[4]) (-$f);
 float $f=getAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[5]);
 setAttr ($prefix+"_l_footB_anim"+"."+$attrs[5]) (-$f);
 string $attrs[]=`listAttr -k -u($prefix+"_l_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_kneeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_kneeB_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_r_kneeB_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_l_kneeB_anim"+"."+$attrs[0]) (-$f);
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
//for Fk Mirror Paste Value
 case 111:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2) 
 setAttr ($prefix+"_l_fk_baseLegB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_baseLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_upLegB_anim"+"."+$attrs[$i]) (-$f);	else
 setAttr ($prefix+"_l_fk_upLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_lowLegB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_lowLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_footB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_footB_anim"+"."+$attrs[$i]) (-$f); else	
 setAttr ($prefix+"_l_fk_footB_anim"+"."+$attrs[$i]) $f;
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toeB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_toeB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_toeB_anim"+"."+$attrs[$i]) $f;	
 }
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_lowLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_upLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
 }//for Index
 }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########MIRROR FUNCTIONS
global proc quadruped_LLegMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
 {string $sel_attr[]=`listAttr $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=$name;
 switch($index)
 { 
//for Ik Copy Value
 case 3:
 string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
//for Fk Copy Value
 case 103:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_baseLeg_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 4:
 string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]) $f;
 }
 ///////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 
 break;
//for Fk Paste Value
 case 104:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_baseLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) $f;	
 }
 /////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 5:
 string $attrs[]=`listAttr -k -u($prefix+"_l_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_foot_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_l_foot_anim"+"."+$attrs[0]) (-$f);
 float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[4]);
 setAttr ($prefix+"_l_foot_anim"+"."+$attrs[4]) (-$f);
 float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[5]);
 setAttr ($prefix+"_l_foot_anim"+"."+$attrs[5]) (-$f);
 string $attrs[]=`listAttr -k -u($prefix+"_l_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_l_knee_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_l_knee_anim"+"."+$attrs[0]) (-$f);
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
//for Fk Mirror Paste Value
 case 105:
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2) 
 setAttr ($prefix+"_l_fk_baseLeg_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_baseLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) (-$f);	else
 setAttr ($prefix+"_l_fk_upLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) (-$f); else	
 setAttr ($prefix+"_l_fk_foot_anim"+"."+$attrs[$i]) $f;
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_l_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_l_fk_toe_anim"+"."+$attrs[$i]) $f;	
 }
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_l_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_l_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_l_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
 }//for Index
 }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########Quadruped MIRROR FUNCTIONS
global proc quadruped_RLegMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
 {string $sel_attr[]=`listAttr $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=$name;
 switch($index)
 { 
//for Ik Copy Value
 case 7:
 string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
//for Fk Copy Value
 case 107:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_baseLeg_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 8:
 string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_knee_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]) $f;
 }
 ///////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 
 break;
//for Fk Paste Value
 case 108:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_baseLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toe_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) $f;	
 }
 /////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 9:
 string $attrs[]=`listAttr -k -u($prefix+"_r_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_foot_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_r_foot_anim"+"."+$attrs[0]) (-$f);
 float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[4]);
 setAttr ($prefix+"_r_foot_anim"+"."+$attrs[4]) (-$f);
 float $f=getAttr ($prefix+"_l_foot_anim_mirror"+"."+$attrs[5]);
 setAttr ($prefix+"_r_foot_anim"+"."+$attrs[5]) (-$f);
 string $attrs[]=`listAttr -k -u($prefix+"_r_knee_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_knee_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_l_knee_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_r_knee_anim"+"."+$attrs[0]) (-$f);
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
//for Fk Mirror Paste Value
 case 109:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2) 
 setAttr ($prefix+"_r_fk_baseLeg_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_baseLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) (-$f);	else
 setAttr ($prefix+"_r_fk_upLeg_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLeg_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLeg_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_lowLeg_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_foot_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_foot_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) (-$f); else	
 setAttr ($prefix+"_r_fk_foot_anim"+"."+$attrs[$i]) $f;
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toe_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toe_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_toe_anim"+"."+$attrs[$i]) $f;	
 }
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_lowLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLeg_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLeg_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_upLeg_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
 }//for Index
 }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########Quadruped MIRROR FUNCTIONS
global proc quadruped_RLegBMirror (string $name,int $switch)
{
float $records[];
$ss=`ls -sl`;
if (`size $ss` == 1)
 {string $sel_attr[]=`listAttr $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $fkik=`getAttr $ss.FkIk`;
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.copyPaste`;
int $ee=$switch;
int $index =0;
if ($fkik==0)
$index =$dd+$ee+100; else $index =$dd+$ee;
string $prefix=$name;
 switch($index)
 { 
//for Ik Copy Value
 case 11:
 string $attrs[]=`listAttr -k -u($prefix+"_r_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_footB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_kneeB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_kneeB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
//for Fk Copy Value
 case 111:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_baseLegB_anim_mirror"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_upLegB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLegB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_lowLegB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_footB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_footB_anim_mirror"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toeB_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_toeB_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 12:
 string $attrs[]=`listAttr -k -u($prefix+"_r_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_footB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_kneeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_kneeB_anim"+"."+$attrs[$i]) $f;
 }
 ///////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 
 break;
//for Fk Paste Value
 case 112:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_baseLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_baseLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_upLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_upLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_lowLegB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_lowLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_footB_anim"+"."+$attrs[$i]) $f;	
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_fk_toeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_fk_toeB_anim"+"."+$attrs[$i]) $f;	
 }
 /////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_r_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) $f;	
 }
 break;
// 
 case 13:
 string $attrs[]=`listAttr -k -u($prefix+"_r_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_footB_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_r_footB_anim"+"."+$attrs[0]) (-$f);
 float $f=getAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[4]);
 setAttr ($prefix+"_r_footB_anim"+"."+$attrs[4]) (-$f);
 float $f=getAttr ($prefix+"_l_footB_anim_mirror"+"."+$attrs[5]);
 setAttr ($prefix+"_r_footB_anim"+"."+$attrs[5]) (-$f);
 string $attrs[]=`listAttr -k -u($prefix+"_r_kneeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_kneeB_anim_mirror"+"."+$attrs[$i]);
 setAttr ($prefix+"_r_kneeB_anim"+"."+$attrs[$i]) $f;
 }
 float $f=getAttr ($prefix+"_l_kneeB_anim_mirror"+"."+$attrs[0]);
 setAttr ($prefix+"_r_kneeB_anim"+"."+$attrs[0]) (-$f);
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
//for Fk Mirror Paste Value
 case 113:
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_baseLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_baseLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2) 
 setAttr ($prefix+"_r_fk_baseLegB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_baseLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_upLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_upLegB_anim"+"."+$attrs[$i]) (-$f);	else
 setAttr ($prefix+"_r_fk_upLegB_anim"+"."+$attrs[$i]) $f;
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_upLegB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_lowLegB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_lowLegB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_lowLegB_anim"+"."+$attrs[$i]) $f;	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_footB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_footB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_footB_anim"+"."+$attrs[$i]) (-$f); else	
 setAttr ($prefix+"_r_fk_footB_anim"+"."+$attrs[$i]) $f;
 } 
 string $attrs[]=`listAttr -k -u($prefix+"_r_fk_toeB_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_fk_toeB_anim_mirror"+"."+$attrs[$i]);
 if ($i<2)
 setAttr ($prefix+"_r_fk_toeB_anim"+"."+$attrs[$i]) (-$f); else
 setAttr ($prefix+"_r_fk_toeB_anim"+"."+$attrs[$i]) $f;	
 }
 ////////////
 string $attrs[]=`listAttr -k -u($prefix+"_r_lowLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_lowLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_lowLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 string $attrs[]=`listAttr -k -u($prefix+"_r_upLegB_middle_anim")`;
 int $attrsNum=size($attrs);
 for($i=0;$i<($attrsNum);$i++)
 {
 float $f=getAttr ($prefix+"_l_upLegB_middle_anim_mirror"+"."+$attrs[$i]);
 if ($i<1)
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) $f; else
 setAttr ($prefix+"_r_upLegB_middle_anim"+"."+$attrs[$i]) (-$f);	
 }
 break;
 }//for Index
 }//for If
}}//for proc
///////////////////////////
///////////////////////////////////
///////////////////////////////////////
///////#########Quadruped MIRROR FUNCTIONS
global proc quadruped_matchfkik (string $name,int $switch)
{
$ss=`ls -sl`;
if (`size $ss` == 1)
{string $sel_attr[]=`listAttr $ss`;for ($sel in $sel_attr) if($sel=="switch"){
int $dd=`getAttr $ss.index`;
//int $ee=`getAttr $ss.switch`;
int $ee=$switch;
int $index =$dd+$ee;
string $prefix=($name+"_");
switch($index)
{
case 3:
select -r ($prefix+"l_fk_baseLeg_anim") ($prefix+"l_fk_upLeg_anim") ($prefix+"l_fk_lowLeg_anim") ($prefix+"l_fk_foot_anim") ($prefix+"l_fk_toe_anim") ;
js_matchObj;
setAttr ($prefix+"LLegSetting.FkIk") 0;
break;
case 4:
select -r ($prefix+"l_foot_anim") ($prefix+"l_knee_anim") ;
js_matchObj;
setAttr ($prefix+"LLegSetting.FkIk") 1;
break;
case 7:
select -r ($prefix+"r_fk_baseLeg_anim") ($prefix+"r_fk_upLeg_anim") ($prefix+"r_fk_lowLeg_anim") ($prefix+"r_fk_foot_anim") ($prefix+"r_fk_toe_anim") ;
js_matchObj;
setAttr ($prefix+"RLegSetting.FkIk") 0;
break;
case 8:
select -r ($prefix+"r_foot_anim") ($prefix+"r_knee_anim") ;
js_matchObj;
setAttr ($prefix+"RLegSetting.FkIk") 1;
break;
case 9:
select -r ($prefix+"l_fk_baseLegB_anim") ($prefix+"l_fk_upLegB_anim") ($prefix+"l_fk_lowLegB_anim") ($prefix+"l_fk_footB_anim") ($prefix+"l_fk_toeB_anim") ;
js_matchObj;
setAttr ($prefix+"LLegBSetting.FkIk") 0;
break;
case 10:
select -r ($prefix+"l_footB_anim") ($prefix+"l_kneeB_anim") ;
js_matchObj;
setAttr ($prefix+"LLegBSetting.FkIk") 1;
break;
case 11:
select -r ($prefix+"r_fk_baseLegB_anim") ($prefix+"r_fk_upLegB_anim") ($prefix+"r_fk_lowLegB_anim") ($prefix+"r_fk_footB_anim") ($prefix+"r_fk_toeB_anim") ;
js_matchObj;
setAttr ($prefix+"RLegBSetting.FkIk") 0;
break;
case 12:
select -r ($prefix+"r_footB_anim") ($prefix+"r_kneeB_anim") ;
js_matchObj;
setAttr ($prefix+"RLegBSetting.FkIk") 1;
break;
}
select -cl;
}
}}
///////////////////////////
print "";