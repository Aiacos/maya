global proc AEAdnMuscleMaterialsNew( string $attrName )
{
  // Create an option menu for materials.
  attrEnumOptionMenuGrp
    -l "Material"
    -annotation ("Defines the solver stiffness:" +
                 "\nFat 1e+3;\nMuscle 5e+3;\nRubber 1e+6;\nTendon 5e+7;" +
                 "\nLeather 1e+8;\nWood 6e+9;\nConcrete 2.5e+10;\nSkin 12e3.")
    -columnAlign 1 "right"
    -at $attrName
    AdnMuscleMaterialsEnumOptionMenu;
}

global proc AEAdnMuscleMaterialsReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable de material option menu if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "material"` )
    attrEnumOptionMenuGrp -e -enable true -attribute $attrName AdnMuscleMaterialsEnumOptionMenu;
  else
    attrEnumOptionMenuGrp -e -enable false AdnMuscleMaterialsEnumOptionMenu;
}

global proc AEAdnMuscleStiffnessMultiplierNew( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Create a custom slider for the stiffness multiplier.
  attrFieldSliderGrp 
    -l "Stiffness Multiplier"
    -annotation "Sets the scaling factor applied to the stiffness."
    -columnAlign 1 "right"
    -at $attrName
    -enable true
    AdnMuscleStiffnessMultiplierSliderGrp;
}

global proc AEAdnMuscleStiffnessMultiplierReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable de material stiffness multiplier if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "stiffnessMultiplier"` )
    attrFieldSliderGrp -e -enable true -attribute $attrName AdnMuscleStiffnessMultiplierSliderGrp;
  else
    attrFieldSliderGrp -e -enable false AdnMuscleStiffnessMultiplierSliderGrp;
}

global proc AEAdnMusclePointMassModeNew( string $attrName )
{
  // Create an option menu for the point mass mode.
  attrEnumOptionMenuGrp
    -l "Point Mass Mode"
    -annotation ("Defines how masses should be used in the solver:" +
                 "\nBy Density estimates the mass value by multiplying the Density * Volume." +
                 "\nBy Uniform Value sets a uniform mass value.")
    -columnAlign 1 "right"
    -at $attrName
    AdnMusclePointMassModeEnumOptionMenu;
}

global proc AEAdnMusclePointMassModeReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable the point mass mode option menu if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "pointMassMode"` )
    attrEnumOptionMenuGrp -e -enable true -attribute $attrName AdnMusclePointMassModeEnumOptionMenu;
  else
    attrEnumOptionMenuGrp -e -enable false AdnMusclePointMassModeEnumOptionMenu;
}

global proc AEAdnMusclePointMassChanged( string $nodeName )
{
  // Read the values
  string $attr = ($nodeName + ".pointMassMode");
  int $pointMassMode = `getAttr $attr`;

  // Enable/disable density slider
  if ( `attrFieldSliderGrp -exists "AdnMuscleDensitySliderGrp"` )
  {
    // NOTE: We have to change this entry if we ever reorder the pointMassMode menu
    $kByDensity = 0; 
    attrFieldSliderGrp -e -enable ($pointMassMode == $kByDensity) AdnMuscleDensitySliderGrp;
  }
}

global proc AEAdnMuscleDensityNew( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Create a custom slider for the density.
  attrFieldSliderGrp 
    -l "Density"
    -annotation ("Sets the density value in kg/m3 to be able to estimate mass values with By Density mode. " +
                 "The value is internally converted to g/cm3.")
    -columnAlign 1 "right"
    -at $attrName
    -enable true
    AdnMuscleDensitySliderGrp;
}

global proc AEAdnMuscleDensityReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable de density if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "density"` )
    attrFieldSliderGrp -e -enable true -attribute $attrName AdnMuscleDensitySliderGrp;
  else
    attrFieldSliderGrp -e -enable false AdnMuscleDensitySliderGrp;
}

global proc AEAdnMuscleSolverStiffnessNew( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Create a custom slider for the stiffness.
  attrFieldSliderGrp 
    -l "Stiffness"
    -annotation "Sets the custom stiffness value."
    -columnAlign 1 "right"
    -at $attrName
    -enable false
    AdnMuscleSolverStiffnessSliderGrp;
}

global proc AEAdnMuscleSolverStiffnessReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable de material stiffness if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "stiffness"` )
    attrFieldSliderGrp -e -enable true -attribute $attrName AdnMuscleSolverStiffnessSliderGrp;
  else
    attrFieldSliderGrp -e -enable false AdnMuscleSolverStiffnessSliderGrp;
}

global proc AEAdnMuscleShapePreservationStiffnessNew( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Create a custom slider for the stiffness.
  attrFieldSliderGrp
    -l "Shape Preserve Stiffness"
    -annotation ("Sets the override for the shape preservation stiffness to control " +
                 "the amount of shape preservation to be applied (Deprecated).")
    -columnAlign 1 "right"
    -at $attrName
    -enable false
    AdnMuscleShapePreservationStiffnessSliderGrp;
}

global proc AEAdnMuscleShapePreservationStiffnessReplace( string $attrName )
{
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  // Disable de shape preservation stiffness if the attribute is not present.
  if ( `attributeQuery -node $nodeName[0] -exists "stiffnessShapePreservation"` )
    attrFieldSliderGrp -e -enable true -attribute $attrName AdnMuscleShapePreservationStiffnessSliderGrp;
  else
    attrFieldSliderGrp -e -enable false AdnMuscleShapePreservationStiffnessSliderGrp;
}

global proc AEAdnMuscleDebugColorChanged(string $nodeName)
{
  // Callback method for the color widget on the attribute template.
  // Will update the deformer values based on the widget.
  float $rgbValues[];
  $rgbValues = `colorSliderGrp -q -rgb AdnMuscleDebugColorWidgetGrp`;

  setAttr ($nodeName + ".debugColorRed")   $rgbValues[0];
  setAttr ($nodeName + ".debugColorGreen") $rgbValues[1];
  setAttr ($nodeName + ".debugColorBlue")  $rgbValues[2];
}

global proc AEAdnMuscleDebugColorNew( string $attrName )
{
  // This method is called when the attribute editor is opened the first time.
  // Creates a color slider group.
  // Assigns callback method to color slider group and defaults to a red color.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugColorChanged(\"" + $nodeName[0] + "\")");

  colorSliderGrp
    -l "Color"
    -annotation "Set the draw color for debug purposes."
    -rgb 1 0 0
    -cc $changeCommand
    AdnMuscleDebugColorWidgetGrp;
}

global proc AEAdnMuscleDebugColorReplace( string $attrName )
{
  // Method called everytime we change between deformers of the same type.
  // Will update the references to now update the new deformer.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugColorChanged(\"" + $nodeName[0] + "\")");
  float $component_r = `getAttr ($nodeName[0] + ".debugColorRed")`;
  float $component_g = `getAttr ($nodeName[0] + ".debugColorGreen")`;
  float $component_b = `getAttr ($nodeName[0] + ".debugColorBlue")`;

  colorSliderGrp
    -e
    -rgb $component_r $component_g $component_b
    -cc $changeCommand
    AdnMuscleDebugColorWidgetGrp;
}

global proc AEAdnMuscleDebugFibersColorChanged(string $nodeName)
{
  // Callback method for the color widget on the attribute template.
  // Will update the deformer values based on the widget.
  float $rgbValues[];
  $rgbValues = `colorSliderGrp -q -rgb AdnMuscleDebugFibersColorWidgetGrp`;

  setAttr ($nodeName + ".debugFibersColorRed")   $rgbValues[0];
  setAttr ($nodeName + ".debugFibersColorGreen") $rgbValues[1];
  setAttr ($nodeName + ".debugFibersColorBlue")  $rgbValues[2];
}

global proc AEAdnMuscleDebugFibersColorNew( string $attrName )
{
  // This method is called when the attribute editor is opened the first time.
  // Creates a color slider group.
  // Assigns callback method to color slider group and defaults to light blue.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugFibersColorChanged(\"" + $nodeName[0] + "\")");

  colorSliderGrp
    -l "Fibers Color"
    -annotation "Set the fibers draw color for debug purposes."
    -rgb 0.0 0.0 1.0
    -cc $changeCommand
    AdnMuscleDebugFibersColorWidgetGrp;
}

global proc AEAdnMuscleDebugFibersColorReplace( string $attrName )
{
  // Method called everytime we change between deformers of the same type.
  // Will update the references to now update the new deformer.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugFibersColorChanged(\"" + $nodeName[0] + "\")");
  float $component_r = `getAttr ($nodeName[0] + ".debugFibersColorRed")`;
  float $component_g = `getAttr ($nodeName[0] + ".debugFibersColorGreen")`;
  float $component_b = `getAttr ($nodeName[0] + ".debugFibersColorBlue")`;

  colorSliderGrp
    -e
    -rgb $component_r $component_g $component_b
    -cc $changeCommand
    AdnMuscleDebugFibersColorWidgetGrp;
}

global proc AEAdnMuscleDebugActivationColorChanged(string $nodeName)
{
  // Callback method for the color widget on the attribute template.
  // Will update the deformer values based on the widget.
  float $rgbValues[];
  $rgbValues = `colorSliderGrp -q -rgb AdnMuscleDebugActivationColorWidgetGrp`;

  setAttr ($nodeName + ".debugActivationColorRed")   $rgbValues[0];
  setAttr ($nodeName + ".debugActivationColorGreen") $rgbValues[1];
  setAttr ($nodeName + ".debugActivationColorBlue")  $rgbValues[2];
}

global proc AEAdnMuscleDebugActivationColorNew( string $attrName )
{
  // This method is called when the attribute editor is opened the first time.
  // Creates a color slider group.
  // Assigns callback method to color slider group and defaults to a red color.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugActivationColorChanged(\"" + $nodeName[0] + "\")");

  colorSliderGrp
    -l "Activation Color"
    -annotation "Set the activation draw color for debug purposes."
    -rgb 1 0 0
    -cc $changeCommand
    AdnMuscleDebugActivationColorWidgetGrp;
}

global proc AEAdnMuscleDebugActivationColorReplace( string $attrName )
{
  // Method called everytime we change between deformers of the same type.
  // Will update the references to now update the new deformer.
  string $nodeName[];
  tokenize($attrName, ".", $nodeName);

  string $changeCommand = ("AEAdnMuscleDebugActivationColorChanged(\"" + $nodeName[0] + "\")");
  float $component_r = `getAttr ($nodeName[0] + ".debugActivationColorRed")`;
  float $component_g = `getAttr ($nodeName[0] + ".debugActivationColorGreen")`;
  float $component_b = `getAttr ($nodeName[0] + ".debugActivationColorBlue")`;

  colorSliderGrp
    -e
    -rgb $component_r $component_g $component_b
    -cc $changeCommand
    AdnMuscleDebugActivationColorWidgetGrp;
}

global proc AEAdnMuscleHandleSolverStiffnessUI( string $nodeName )
{
  if ( `attributeQuery -node $nodeName -exists "useCustomStiffness"` )
  {
    $useCustomStiffness = `getAttr ($nodeName + ".useCustomStiffness")`;
    $showCustomStiffness = !$useCustomStiffness;

    // Disable the material stiffness option menu if the custom stiffness is activated.
    if ( `attrEnumOptionMenuGrp -exists "AdnMuscleMaterialsEnumOptionMenu"` )
      attrEnumOptionMenuGrp -e -enable $showCustomStiffness AdnMuscleMaterialsEnumOptionMenu;

    // Enable the stiffness multiplier if the custom stiffness is deactivated.
    if ( `attrFieldSliderGrp -exists "AdnMuscleStiffnessMultiplierSliderGrp"` )
      attrFieldSliderGrp -e -enable $showCustomStiffness AdnMuscleStiffnessMultiplierSliderGrp;

    // Enable the stiffness if the custom stiffness is activated.
    if ( `attrFieldSliderGrp -exists "AdnMuscleSolverStiffnessSliderGrp"` )
      attrFieldSliderGrp -e -enable $useCustomStiffness AdnMuscleSolverStiffnessSliderGrp;
  }
}

global proc AEAdnMuscleHandleShapePreservationStiffnessUI( string $nodeName )
{
  if ( `attributeQuery -node $nodeName -exists "overrideShapePreservationStiffness"` )
  {
    $overrideShapePreservationStiffness = `getAttr ($nodeName + ".overrideShapePreservationStiffness")`;
    $showShapePreservationStiffness = $overrideShapePreservationStiffness;

    // Enable the shape preservation stiffness slider if the override checkbox is activated.
    if ( `attrFieldSliderGrp -exists "AdnMuscleShapePreservationStiffnessSliderGrp"` )
      attrFieldSliderGrp -e -enable $showShapePreservationStiffness AdnMuscleShapePreservationStiffnessSliderGrp;
  }
}

global proc AEAdnMuscleTemplate ( string $nodeName )
{
  editorTemplate -beginScrollLayout;

    // Solver Attributes section
    editorTemplate -beginLayout "Solver Attributes" -collapse 0;
      editorTemplate -label "Enable"
        -annotation "Flag to toggle the solver execution."
        -addControl "enable";
      editorTemplate -label "Iterations"
        -annotation ("Sets the number of solver iterations." +
                     "\nHigher values produce more accurate results but may impact the performance.")
        -addControl "iterations";
      editorTemplate -callCustom 
        "AEAdnMuscleMaterialsNew"
        "AEAdnMuscleMaterialsReplace" 
        "material";
      editorTemplate -callCustom 
        "AEAdnMuscleStiffnessMultiplierNew"
        "AEAdnMuscleStiffnessMultiplierReplace"
        "stiffnessMultiplier";
      editorTemplate -label "Activation"
        -annotation "Sets fiber activation level."
        -addControl "activation";
      editorTemplate -label "Rest Activation"
        -annotation "Sets fiber activation level at rest."
        -addControl "restActivation";
      editorTemplate -label "Volume Preservation"
        -annotation "Sets total volume preservation factor."
        -addControl "volumePreservation";
      editorTemplate -label "Volume Activation Ratio"
        -annotation "Sets the volume ratio gain driven by the current activation of the muscle."
        -addControl "volumeActivationRatio";
      editorTemplate -label "Volume Ratio"
        -annotation ("Sets the global volume ratio gain applied on top of the volume ratio gain " +
                      "driven by the current activation of the muscle.")
        -addControl "volumeRatio";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "Time Attributes" -collapse 0;
      editorTemplate -label "Preroll Start Time"
        -annotation "Sets the frame at which the preroll begins. The preroll ends at Start Time."
        -addControl "prerollStartTime";
      editorTemplate -label "Start Time"
        -annotation "Determines the frame at which the simulation starts."
        -addControl "startTime";
      editorTemplate -label "Current Time"
        -annotation "Current frame of the simulation."
        -addControl "currentTime";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "Scale Attributes";
      editorTemplate -label "Time Scale"
        -annotation "Sets the scaling factor applied to the simulation time step."
        -addControl "timeScale";
      editorTemplate -label "Space Scale"
        -annotation "Sets the scaling factor applied to the masses and/or the forces."
        -addControl "spaceScale";
      editorTemplate -label "Space Scale Mode"
        -annotation "Determines if the spatial scaling affects the masses, the forces, or both."
        -addControl "spaceScaleMode";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "Gravity";
      editorTemplate -label "Gravity"
        -annotation "Sets the magnitude in m/s2 of the gravity acceleration. The value is internally converted to cm/s2."
        -addControl "gravity";
      editorTemplate -label "Gravity Direction"
        -annotation "Sets the direction of the gravity acceleration."
        -addControl "gravityDirection";
    editorTemplate -endLayout;
    
    // Add a collapsible list of activations
    editorTemplate -beginLayout "Activation Layers" -collapse 1;
      editorTemplate -label "Solver Activation"
        -annotation "Global activation currently used by the solver."
        -addControl "outputSolverActivation";
      editorTemplate -label "Activation List"
        -annotation ("List of layered activations to compute the final activation of the muscle based on the " + 
                    "\nselected operations. The global activation attribute works as the first layer. " +
                    "\nOperations: (0): Override; (1): Add; (2): Subtract; (3): Multiply; (4): Divide")
        -addControl "activationList";
    editorTemplate -endLayout;

    // Advanced Settings section
    editorTemplate -beginLayout "Advanced Settings" -collapse 1;
      // Advanced Initialization Settings subsection
      editorTemplate -beginLayout "Initialization Settings" -collapse 1;
        editorTemplate -label "Fiber Lengths At Start Time"
          -annotation ("Initialize Fibers directions at start time. If enabled, the rest length of the fibers will be recalculated at start time.")
          -interruptOptimize
          -addControl "initFibersLengthsAtStartTime";
        editorTemplate -label "Shape Preservation At Start Time"
          -annotation ("Initialize Shape Preservation Constraints on start time.")
          -interruptOptimize
          -addControl "initShapePreservationAtStartTime";
        editorTemplate -label "External Constraints At Start Time"
          -annotation ("Initialize Attachments To Transform, Attachments To Geometry, Slide On Segment and Slide On Geometry constraints on start time.")
          -interruptOptimize
          -addControl "initExternalConstraintsAtStartTime";
      editorTemplate -endLayout;
      // Advanced Stiffness Parameters subsection
      editorTemplate -beginLayout "Stiffness Settings" -collapse 1;
        editorTemplate -label "Use Custom Stiffness"
          -annotation ("Toggles the use of a custom stiffness value." +
                       "\nIf enabled, the Material stiffness value is ignored and the " +
                       "Stiffness attribute below is used instead.")
          -addControl "useCustomStiffness" "AEAdnMuscleHandleSolverStiffnessUI";
        editorTemplate -callCustom
          "AEAdnMuscleSolverStiffnessNew"
          "AEAdnMuscleSolverStiffnessReplace"
          "stiffness";
        editorTemplate -label "Override Shape Preserve Stiffness (Deprecated)"
          -annotation ("Override the shape preservation stiffness with a custom value. If off it will use " +
                       "either the material stiffness or the custom stiffness value (Deprecated).")
          -addControl "overrideShapePreservationStiffness" "AEAdnMuscleHandleShapePreservationStiffnessUI";
        editorTemplate -callCustom
          "AEAdnMuscleShapePreservationStiffnessNew"
          "AEAdnMuscleShapePreservationStiffnessReplace"
          "stiffnessShapePreservation";
      editorTemplate -endLayout;
      // Advanced Override Stiffness subsection
      editorTemplate -beginLayout "Override Constraint Stiffness" -collapse 1;
        editorTemplate -label "Solver Stiffness"
          -annotation "Global stiffness currently used by the solver."
          -addControl "outputSolverStiffness";
        editorTemplate -label "Attachments To Geometry"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for attachment to geometry constraints."
          -addControl "attachmentToGeometryStiffnessOverride";
        editorTemplate -label "Attachments To Transform"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for attachment to transform constraints."
          -addControl "attachmentToTransformStiffnessOverride";
        editorTemplate -label "Fiber Constraints"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for fiber constraints."
          -addControl "fiberStiffnessOverride";
        editorTemplate -label "Shape Preservation"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for shape preservation constraints. This value is only considered if the 'Override Shape Preserve Stiffness' checkbox is disabled."
          -addControl "shapeStiffnessOverride";
        editorTemplate -label "Slide On Geometry"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for slide on geometry constraints."
          -addControl "slideOnGeometryStiffnessOverride";
        editorTemplate -label "Slide On Segment"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for slide on segment constraints."
          -addControl "slideOnSegmentStiffnessOverride";
        editorTemplate -label "Volume Constraints"
          -annotation "If its value is equal or greater than 0.0, it will override the global stiffness for volume constraints."
          -addControl "volumeStiffnessOverride";
      editorTemplate -endLayout;
      editorTemplate -beginLayout "Mass Properties" -collapse 1;
        // Advanced Mass Properties subsection
        editorTemplate
          -addControl "pointMassMode" "AEAdnMusclePointMassChanged"
          -suppress
          -callCustom "AEAdnMusclePointMassModeNew" "AEAdnMusclePointMassModeReplace" "pointMassMode";
        editorTemplate -callCustom 
          "AEAdnMuscleDensityNew"
          "AEAdnMuscleDensityReplace"
          "density";
        editorTemplate -label "Global Mass Multiplier"
          -annotation "Sets the scaling factor applied to the mass of every point."
          -addControl "globalMassMultiplier";
      editorTemplate -endLayout;
      editorTemplate -beginLayout "Dynamic Properties" -collapse 1;
        editorTemplate -label "Triangulate Mesh"
          -annotation ("Use the internally triangulated mesh to build constraints.")
          -addControl "triangulateMesh";
        editorTemplate -label "Global Damp. Multiplier"
          -annotation "Sets the scaling factor applied to the global damping of every point."
          -addControl "globalDampingMultiplier";
        editorTemplate -label "Inertia Damper"
          -annotation "Sets the linear damping applied to the dynamics of every point.\nRange 0 to 1."
          -addControl "inertiaDamper";
        editorTemplate -label "Rest Length Multiplier"
          -annotation "Sets the scaling factor applied to the edge lengths at rest."
          -addControl "restLengthMultiplier";
        editorTemplate -label "Max Sliding Distance"
          -annotation ("Determines the size of the sliding area. It corresponds to the maximum distance" +
                       "\nto the closest point on the reference mesh computed on initialization." +
                       "\nThe higher this value is, the higher quality and the lower performance.")
          -addControl "maxSlidingDistance";
        editorTemplate -label "Compression Multiplier"
          -annotation "Sets the scaling factor applied to the compression resistance of every point."
          -addControl "compressionMultiplier";
        editorTemplate -label "Stretching Multiplier"
          -annotation "Sets the scaling factor applied to the stretching resistance of every point."
          -addControl "stretchingMultiplier";
        editorTemplate -label "Attenuation Vel. Factor"
          -annotation ("Sets the attenuation factor that drives how much velocity attenuation is" +
                       "\napplied based on a matrix provided to the plug 'AttenuationMatrix'.\nRange 0 to 1.")
          -addControl "attenuationVelocityFactor";
        editorTemplate -label "Hard Attachments"
          -annotation "Toggles Hard Attachments in deformer. Points assigned to an attachment will be forced to follow it."
          -addControl "hardAttachments";
        editorTemplate -label "Sliding Constraints Mode"
          -annotation ("Defines the mode of execution for the sliding constraints:" +
                       "\nQuality, is more accurate, recommended for final results;" +
                       "\nFast, provides higher performance, recommended for preview.")
          -addControl "slidingConstraintsMode";
      editorTemplate -endLayout;
    editorTemplate -endLayout;
    
    // Debug section
    editorTemplate -beginLayout "Debug" -collapse 1;
      editorTemplate -label "Debug"
        -annotation "Toggles visualization of debugger."
        -addControl "debug";
      editorTemplate -label "Feature"
        -annotation "Sets the feature to debug."
        -addControl "debugFeature";
      editorTemplate -label "Width Scale"
        -annotation "Sets the scaling factor applied to the width of the debug lines."
        -addControl "debugWidth";
      editorTemplate -callCustom
        "AEAdnMuscleDebugColorNew"
        "AEAdnMuscleDebugColorReplace"
        "debugColor";
      editorTemplate -beginLayout "Debug Fibers" -collapse 1;
        editorTemplate -label "Fibers Scale"
          -annotation "Sets the scaling factor applied to the length of the debug fiber lines."
          -addControl "debugFibersScale";
      editorTemplate -callCustom
        "AEAdnMuscleDebugFibersColorNew"
        "AEAdnMuscleDebugFibersColorReplace"
        "debugFibersColor";
      editorTemplate -callCustom
        "AEAdnMuscleDebugActivationColorNew"
        "AEAdnMuscleDebugActivationColorReplace"
        "debugActivationColor";
      editorTemplate -endLayout;
    editorTemplate -endLayout;

    // Deformer Attributes section
    editorTemplate -beginLayout "Deformer Attributes" -collapse 1;
      editorTemplate -label "Envelope" -addControl "envelope";
    editorTemplate -endLayout;

    // suppressed attributes

  editorTemplate -addExtraControls;
  editorTemplate -endScrollLayout;
}
